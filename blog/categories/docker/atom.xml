<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | さよならインターネット]]></title>
  <link href="http://blog.kenjiskywalker.org/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.kenjiskywalker.org/"/>
  <updated>2015-02-11T02:50:20+09:00</updated>
  <id>http://blog.kenjiskywalker.org/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS Xでfigを利用してDockerのコンテナを操作する]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2014/10/25/osx-fig-docker-access-container/"/>
    <updated>2014-10-25T21:38:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2014/10/25/osx-fig-docker-access-container</id>
    <content type="html"><![CDATA[<blockquote><p>Docker v1.3<br/>
fig 1.0.0</p></blockquote>

<h2>TL;DR</h2>

<p>OS XでDockerコンテナを操作するのが手間だったけどfigを使えば解決した.<br/>
OS Xで本番環境と同じような環境をつくりたくてboot2docker + figを利用した</p>

<h2>目を通しておいてもらいたい最高のエントリー</h2>

<p><a href="http://qiita.com/toritori0318/items/190fd2dad2bf3ce38b88">Docker1.3版 boot2docker+fig入門 - Qiita</a><br/>
<a href="http://deeeet.com/writing/2014/10/08/boot2docker-guest-additions/">boot2dockerでのVolume問題が解決しそう | SOTA</a></p>

<h2>必要なもの</h2>

<ul>
<li><a href="http://boot2docker.io/">boot2docker</a></li>
<li><a href="http://www.fig.sh/">fig</a></li>
</ul>


<h2>fig</h2>

<p>OS Xでは、Docker containerにアクセスするまでに</p>

<pre><code>OS X -&gt; boot2docker -&gt; docker container
</code></pre>

<p>boot2dockerを一旦挟まなければならなかった.<br/>
これをfigを利用することで、透過的に</p>

<pre><code>OS X -&gt; docker container
</code></pre>

<p>このようにアクセスしているかのようにラッピングができる</p>

<h2>update 2014/10/27</h2>

<p>完全に勘違い！OS Xでも普通に<code>docker</code>コマンド使えます.</p>

<pre><code>$ boot2docker up
$ boot2docker ssh
$ docker build .
</code></pre>

<p>などと操作しなくても<a href="https://github.com/docker/docker/blob/master/CHANGELOG.md#073-2014-01-02">0.7.3</a>の頃から<br/>
DockerはOS Xに対応していて</p>

<pre><code>$ boot2docker up
$ docker build .
</code></pre>

<p>のようにログインせずともTiny Core Linuxのリモートクライアントとして<br/>
コマンドを発行できた.全然アップデート見てないことがバレた〜</p>

<p>Thanks <a href="http://deeeet.com/writing/2014/10/08/boot2docker-guest-additions/">@deeeet</a>!!!</p>

<h3>figとは</h3>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/deeeet">@deeeet</a> <a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> fig、foremanとかprocletに近い用途なイメージあります</p>&mdash; ゆううき (@y_uuk1) <a href="https://twitter.com/y_uuk1/status/526631144335233025">October 27, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです.わかりやすい.</p>

<h3>figを利用しない場合</h3>

<pre><code>$ boot2docker up
$ docker build .
$ docker run -p 3000:3000 8c6d6a1339b6 bundle exec rackup -p 3000
</code></pre>

<p>のような操作で起動できる.</p>

<h2>figをどのように使うか</h2>

<p>とあるRailsのアプリケーションがあった時に、そのアプリケーションを<br/>
Docker containerで透過的に操作する為にどのようなことが必要なのかの例</p>

<pre><code>.
├── Gemfile
├── Gemfile.lock
├── README.rdoc
├── Rakefile
├── app
├── bin
├── build
├── config
├── config.ru
├── db
├── lib
├── log
├── myapp
├── public
├── test
├── tmp
└── vendor
</code></pre>

<p>このようにRailsアプリケーションのディレクトリに</p>

<pre><code>.
├── Dockerfile
├── Gemfile
├── Gemfile.lock
├── README.rdoc
├── Rakefile
├── app
├── bin
├── build
├── config
├── config.ru
├── db
├── fig.yml
├── lib
├── log
├── myapp
├── public
├── test
├── tmp
└── vendor
</code></pre>

<p><code>Dockerfile</code>と<code>fig.yml</code>を置く</p>

<ul>
<li>Dockerfile</li>
</ul>


<p>日本に住む人々は魂をRedHatに引かれてUbuntuを利用しにくいので<br/>
CentOS 6.5でRuby 2.1.3が使えるコンテナを用意した(名前の通りsqliteも入っている)</p>

<pre><code>FROM kenjiskywalker/dockerfile-centos-ruby-sqlite:ruby213

WORKDIR /tmp
ADD Gemfile Gemfile
ADD Gemfile.lock Gemfile.lock
RUN bundle install

RUN mkdir /myapp
WORKDIR /myapp
ADD . /myapp
</code></pre>

<ul>
<li>fig.yml</li>
</ul>


<pre><code>web:
  build: .
  command: bundle exec rackup -p 3000
  volumes:
    - .:/myapp
  ports:
    - "3000:3000"
</code></pre>

<p>この状態で</p>

<pre><code>$ boot2docker up
$ fig up
</code></pre>

<p>とコマンドを発行し</p>

<pre><code>$ boot2docker ip

The VM's Host only interface IP address is: 192.168.59.103

$
</code></pre>

<p>で利用しているIPアドレスを確認して</p>

<p><code>http://192.168.59.103:3000/</code>にアクセスすると<br/>
コンテナ上で起動しているアプリケーションにアクセスすることができる.</p>

<h2>手元のデータベース・サーバで何を選択するか</h2>

<p>development環境がsqlite3を利用する設定であれば<br/>
データベースのミドルウェアを立ち上げる必要はないので<br/>
1コンテナで完結するのでこの方法が利用できます.</p>

<ul>
<li>config/database.yml</li>
</ul>


<pre><code>development: &amp;default
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000
</code></pre>

<p>しかし、裏側にMySQLを利用する場合は</p>

<ul>
<li>fig.yml</li>
</ul>


<pre><code>db:
  image: mysql
  environment:
    MYSQL_ROOT_PASSWORD: "pass"
  ports:
    - "3306"

web:
  build: .
  command: bundle exec rackup -p 3000
  volumes:
    - .:/myapp
  ports:
    - "3000:3000"
  links:
    - db
  environment:
    DB_HOST: db
</code></pre>

<ul>
<li>config/database.yml</li>
</ul>


<pre><code>development: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: 5
  database: mysql
  username: root
  password: 'pass'
  host: &lt;%= ENV['DB_HOST'] %&gt;
</code></pre>

<p>このようにデータベースサーバ用コンテナの設定をRails側に記載しなければならない.</p>

<p>アプリケーションもデータベースもsupervisorなどで動くコンテナを<br/>
作成すれば良いのではないか、という話になるが、<br/>
本番サーバも同じようにsupervisorを利用しているならまだしも<br/>
手元でのテストをするためだけに専用のコンテナを用意するのは<br/>
本質的ではない気がします.</p>

<blockquote><p>今書いていて、supervisorで色々上げるコンテナ用意するのは<br/>
それはそれでいいかもしれないという気がしてきた</p></blockquote>

<h2>まとめ</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/deeeet">@deeeet</a> <a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> fig、foremanとかprocletに近い用途なイメージあります</p>&mdash; ゆううき (@y_uuk1) <a href="https://twitter.com/y_uuk1/status/526631144335233025">October 27, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>です.</p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/toritori0318/items/190fd2dad2bf3ce38b88">Docker1.3版 boot2docker+fig入門 - Qiita</a> アルパカさんの最高のまとめ</li>
<li><a href="http://www.fig.sh/rails.html">Getting started with Fig and Rails - fig</a></li>
<li><a href="http://blog.docker.com/2014/10/fig-1-0-boot2docker-compatibility-and-more/">Fig 1.0: boot2docker compatibility and more | Docker Blog</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
