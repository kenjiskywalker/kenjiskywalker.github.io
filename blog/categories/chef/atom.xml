<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | さよならインターネット]]></title>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/"/>
  <updated>2014-12-07T05:52:04+09:00</updated>
  <id>http://kenjiskywalker.github.com/kenjiskywalker/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chefのruby_blockを利用してファイル更新時に条件によってログを出力する]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/03/28/chef-ruby-block/"/>
    <updated>2014-03-28T01:59:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/03/28/chef-ruby-block</id>
    <content type="html"><![CDATA[<p>Chefには冪等性という特徴がありますが、実際の運用では<br/>
ミドルウェアの設定の更新はしたいが、ミドルウェアの再起動までは<br/>
自分の手で確認したい。という条件もあるかと思います。</p>

<ul>
<li>設定ファイルは常に更新しても良い</li>
<li>設定ファイルが更新された時だけミドルウェアを起動したい</li>
<li>設定ファイルが更新された時にミドルウェアが起動済みであればログに出力</li>
</ul>


<p>上記条件を満たすために実施した内容について共有します。</p>

<ul>
<li>chef/site-cookbooks/apache/recipes/default.rb</li>
</ul>


<p>```
template "/etc/httpd/conf/httpd.conf" do
  source "httpd.conf.erb"
  owner  "www"
  mode   0644
  notifies :run, "ruby_block[warn]", :immediately
end</p>

<p>ruby_block "warn" do
  block do</p>

<pre><code># httpdが起動中であればログ出力
unless `pgrep httpd` == ""
  print &lt;&lt;"EOS"
</code></pre>

<p>\e[33m===================================================================
recipe:apache</p>

<p>apacheが起動中です。
新しい設定を反映させるためにはapahceを再起動してください。
===================================================================\e[0m
EOS</p>

<pre><code>end
</code></pre>

<p>  end
  action :nothing
  notifies :start, "service[httpd]"
end</p>

<p>service "httpd" do
  action :enable
end</p>

<p>```</p>

<ol>
<li><code>/etc/httpd/conf/httpd.conf</code> が更新される</li>
<li><code>notifies :run, "ruby_block[warn]"</code>で<code>ruby_block</code>を実行</li>
<li><code>ruby_block</code>内でミドルウェアが起動中かどうかRubyのコードで条件分岐</li>
<li>起動中であればログを出力</li>
<li><code>ruby_block</code>で<code>notifies :start, "service[httpd]"</code>を実行、ミドルウェアの起動を行う</li>
</ol>


<p><code>ruby_block</code>は実行順序が最後になるというChefの設計上、<br/>
<code>notifies :start, "service[httpd]"</code>という方法を選択しました。</p>

<p>もう少しマシな方法があれば是非とも教えてください。<br/>
Chefは何か込み入ったことをしようとすると色々と工夫しないといけないのが難点ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefのnode[:hoge]をどうにかしたい]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/12/04/chef-merge-deep/"/>
    <updated>2013-12-04T14:26:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/12/04/chef-merge-deep</id>
    <content type="html"><![CDATA[<p>2013年オワコンの代表格として名指しされているChefですが<br/>
<strong>nodes/hoge.json</strong>で与えられた<code>node[:hoge]</code>の値を<br/>
<strong>roles/role.json</strong>で値を追加したい場合があります。<br/>
そのやり方として、オフィシャルにはディープマージという方法が載っていました。</p>

<p><a href="http://docs.opscode.com/essentials_node_object_deep_merge.html">http://docs.opscode.com/essentials_node_object_deep_merge.html</a></p>

<ul>
<li><p>nodes/hoge.json
<code>
{
"run_list": [ "role[role_one]" ]
}
</code></p></li>
<li><p>roles/role_one.json
<code>
{
"name": "role_one",
"description": "role one",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": [ "foo", "bar" ]
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "role[role_two]"
]
}
</code></p></li>
<li><p>roles/role_two.json
<code>
{
"name": "role_two",
"description": "role two",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": [ "baz" ]
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "recipe[hoge_recipe]"
]
}
</code></p></li>
<li><p>cookbooks/hoge_recipe/recipe/default.rb
<code>
node[:hoge].each do |h|
p h
end
</code></p></li>
</ul>


<p><code>role</code>で回せと。</p>

<p>ほかにも<a href="https://twitter.com/keita">@keita</a>氏に教えてもらったのですが<br/>
Key-Valueで渡せばいけるらしいです。</p>

<p><a href="https://coderanger.net/2013/06/arrays-and-chef/">Arrays and Chef Attributes - Noah Kantrowitz</a></p>

<ul>
<li><p>nodes/hoge.json
```
{
"hoge": {</p>

<pre><code>"foo": true,
"bar": true
</code></pre>

<p>},
"run_list": [ "role[role_one]" ]
}
```</p></li>
<li><p>roles/role_one.json
```
{
"name": "role_one",
"description": "role one",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": {</p>

<pre><code>  "baz": true
</code></pre>

<p>  }
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "recipe[hoge_recipe]"
]
}
```</p></li>
<li><p>cookbooks/hoge_recipe/recipe/default.rb
<code>
node[:hoge].each do |k,v|
p k
end
</code></p></li>
</ul>


<p>どちらも気持ち悪いので使いません。<br/>
よさ気な方法あれば教えて下さい。</p>

<p>Chef、Opscode社の経典みたいなcookbooksと<br/>
何がどこに書かれているかよくわからないドキュメントをのぞけば<br/>
2014年もよしなに使えるのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[plenvとperl-buildを走らせるchefのcookbookを書いた]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/08/31/plenv-chef-cookbook/"/>
    <updated>2013-08-31T03:03:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/08/31/plenv-chef-cookbook</id>
    <content type="html"><![CDATA[<p>perl-buildまでやるやつ書いた。</p>

<p>参考元：<a href="http://hirobanex.net/article/2013/06/1372382206">plenvによるPerl環境を構築するchefのオレオレサンプルレシピ - hirobanex.net</a></p>

<p><a href="https://github.com/kenjiskywalker/mychefrepo/tree/master/site-cookbooks/plenv">https://github.com/kenjiskywalker/mychefrepo/tree/master/site-cookbooks/plenv</a></p>

<p>これでchef使って一撃でPerlの環境用意できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chefの中身読んで、外部からrun_listを利用する]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/07/17/chef-run_list/"/>
    <updated>2013-07-17T00:29:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/07/17/chef-run_list</id>
    <content type="html"><![CDATA[<p>run_listを渡してるところを探した。<br/>
といってもほとんど<a href="https://twitter.com/soh335">@soh335</a>が教えてくれた。さすが一流エンジニアだ。</p>

<p><code>/chef/lib/chef/run_list.rb</code></p>

<p>```
def expansion_for_data_source(environment, data_source, opts={})
  case data_source.to_s
  when 'disk'</p>

<pre><code>RunListExpansionFromDisk.new(environment, @run_list_items)
</code></pre>

<p>  when 'server'</p>

<pre><code>RunListExpansionFromAPI.new(environment, @run_list_items, opts[:rest])
</code></pre>

<p>  end
end
```</p>

<p>ここが怪しかった。</p>

<p><code>/chef/spec/unit/run_list_spec.rb</code></p>

<p>ここ見たら</p>

<p>```</p>

<pre><code>describe "from disk" do
  it "should load the role from disk" do
    Chef::Role.should_receive(:from_disk).with("stubby")
    @run_list.expand("_default", "disk")
  end

  it "should log a helpful error if the role is not available" do
    Chef::Role.stub!(:from_disk).and_raise(Chef::Exceptions::RoleNotFound)
    Chef::Log.should_receive(:error).with("Role stubby (included by 'top level') is in the runlist but does not exist. Skipping expand.")
    @run_list.expand("_default", "disk")
  end
end
</code></pre>

<p>```</p>

<p>こんなん書いてあった。</p>

<p>```</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'rubygems'
require 'pp'
require 'json'
require 'chef/run_list'</p>

<p>json_file = "./json/yoshimasa.json"</p>

<p>host_config = JSON.parse(File.read(json_file))</p>

<p>Chef::Config[:cookbook_path] = '/root/chef/cookbook/'
Chef::Config[:role_path] = '/root/chef/json/'</p>

<p>run_list = Chef::RunList.new("recipe[nginx]", "role[hoge]")</p>

<p>p run_list</p>

<h1>#&lt;Chef::RunList:0x7f6fb8732510 @run_list_items=[#&lt;Chef::RunList::RunListItem:0x7f6fb87323d0 @type=:recipe, @version=nil, @name="nginx">, #&lt;Chef::RunList::RunListItem:0x7f6fb87323a8 @type=:role, @version=nil, @name="hoge">]></h1>

<p>pp run_list.expand("_default", "disk")</p>

<h1>#&lt;Chef::RunList::RunListExpansionFromDisk:0x7f6fb8732100</h1>

<h1>@applied_roles={"hage"=>true, "hoge"=>true},</h1>

<h1>@default_attrs={},</h1>

<h1>@environment="_default",</h1>

<h1>@missing_roles_with_including_role=[],</h1>

<h1>@override_attrs={},</h1>

<h1>@recipes=["nginx", "postfix", "yum"],</h1>

<h1>@run_list_items=[],</h1>

<h1>@run_list_trace=</h1>

<h1>{"role[hoge]"=>["role[hage]", "recipe[postfix]", "recipe[yum]"],</h1>

<h1>"top level"=>["recipe[nginx]", "role[hoge]"]},</h1>

<h1>@source=nil></h1>

<p>p run_list.expand("_default", "disk").recipes</p>

<h1>["nginx", "postfix", "yum"]</h1>

<p>```</p>

<p>こんな感じでrun_listを読める。何が便利かっていうと</p>

<p>```
{
  "run_list": [</p>

<pre><code>"role[hage]"
</code></pre>

<p>  ]
}
```</p>

<p>```
{
  "run_list": [</p>

<pre><code>"recipe[postfix]", "recipe[yum]"
</code></pre>

<p>  ]
}
```</p>

<p>```
run_list = Chef::RunList.new("recipe[nginx]", "role[hoge]")</p>

<p>...
p run_list.expand("_default", "disk").recipes</p>

<h1>["nginx", "postfix", "yum"]</h1>

<p>```</p>

<p>という感じにroleの中のrun_listを読み込んでrecipesに突っ込んでくれる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefで公開したくないJSONデータを暗号化するためにDataBagsを利用してみた記録]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/05/20/chef-databag/"/>
    <updated>2013-05-20T18:44:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/05/20/chef-databag</id>
    <content type="html"><![CDATA[<blockquote><p>ruby 1.8.7<br/>
chef 11.4.4<br/>
knife-solo_data_bag 0.3.2</p></blockquote>

<p>2013/05/20 現在</p>

<blockquote><p>knife-solo 0.2.0 では "knife solo data bag" は使えず<br/>
https://github.com/thbishop/knife-solo_data_bag こちらを利用</p></blockquote>

<hr />

<h2>参考</h2>

<ul>
<li><a href="http://docs.opscode.com/essentials_data_bags.html">About Data Bags — Chef Docs</a></li>
<li><a href="http://docs.opscode.com/essentials_data_bags_encrypt.html">Encrypt a Data Bag — Chef Docs</a></li>
</ul>


<h2>knife-solo_data_bagのインストール</h2>

<p>```</p>

<h1>gem install knife-solo_data_bag</h1>

<h1>cd /root/chef/ ; pwd</h1>

<p>```</p>

<h2>暗号化用の鍵を用意</h2>

<p>```</p>

<h1>openssl rand -base64 512 > encrypted_data_bag_secret</h1>

<p>```</p>

<h2>環境整備</h2>

<p>```</p>

<h1>mkdir /root/chef/data_bags</h1>

<h1>cat /root/.chef/knife.rb</h1>

<p>cookbook_path '/root/chef/cookbooks'
data_bag_path '/root/chef/data_bags'
encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret'
#
```</p>

<p>のような感じでknifeの設定を整えます</p>

<h2>data_bagをつくる</h2>

<p>```
#</p>

<h1>knife solo data bag create data_hoge bag_hoge --secret-file ./encrypted_data_bags_secret</h1>

<p>ERROR: RuntimeError: Please set EDITOR environment variable
#</p>

<h1>export EDITOR=vim</h1>

<p>#</p>

<h1>knife solo data bag create data_hoge bag_hoge --secret-file ./encrypted_data_bags_secret</h1>

<p>{</p>

<pre><code>"id": "bag_hoge",
</code></pre>

<p>  "data": "bagbag"
}</p>

<h1></h1>

<h1>cat /root/chef/data_bags/data_hoge/bag_hoge.json</h1>

<p>{
  "data_bag": "data_hoge",
  "chef_type": "data_bag_item",
  "name": "data_bag_item_data_hoge_bag_hoge",
  "json_class": "Chef::DataBagItem",
  "raw_data": {</p>

<pre><code>"id": "bag_hoge",
"data": {
  "iv": "++q0Yc6EHUu8bdAxb/Ekuw==\n",
  "version": 1,
  "encrypted_data": "ErOwQM7QzvSJavsHPQovjwmRk7egm6EOCvDz2cUMd0Y=\n",
  "cipher": "aes-256-cbc"
}
</code></pre>

<p>  }
}#
#</p>

<h1>knife solo data bag show data_hoge bag_hoge</h1>

<p>data: bagbag
id:   bag_hoge
#
```</p>

<p><code>bag_hoge.json</code>の実ファイルを開いても中身は暗号化されている</p>

<h2>秘密鍵が利用されているか確認</h2>

<p>```</p>

<h1>cat /root/.chef/knife.rb</h1>

<p>cookbook_path '/root/chef/cookbooks'
data_bag_path '/root/chef/data_bags'</p>

<h1>encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret'</h1>

<p>#
```</p>

<p>コメントアウトしてみる</p>

<p>```
aws_keys = Chef::EncryptedDataBagItem.load(, secret)</p>

<h1>knife solo data bag show data_hoge bag_hoge</h1>

<p>data:
  cipher:         aes-256-cbc
  encrypted_data: ErOwQM7QzvSJavsHPQovjwmRk7egm6EOCvDz2cUMd0Y=</p>

<p>  iv:             ++q0Yc6EHUu8bdAxb/Ekuw==</p>

<p>  version:        1
id:   bag_hoge
#
```</p>

<p>復号化されない。秘密鍵が使われていることがわかる</p>

<h2>recipeから呼び出す</h2>

<p><code>solo.rb</code></p>

<p><code>
file_cache_path '/tmp/chef-solo'
cookbook_path   '/root/chef/cookbooks'
data_bag_path   '/root/chef/data_bags'
encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret'
</code></p>

<p><code>data_bag_path</code>と<code>encrypted_data_bag_secret</code>でファイルの位置をsoloに教える。</p>

<p><code>/root/chef/cookbooks/data_bag_test/recipes/default.rb</code>
```
data_bag = Chef::EncryptedDataBagItem.load('data_hoge','bag_hoge')
hoge = data_bag['data']</p>

<p>p "data_bag is [#{hoge}]"
```</p>

<p>こんな感じのrecipeをつくる</p>

<p><code>data_bag_test.json</code></p>

<p>```
{
   "run_list": [</p>

<pre><code>"data_bag_test"
</code></pre>

<p>  ]
}
```</p>

<p>のようなテストJSONを作成し、chef-soloを走らせる</p>

<p>```</p>

<h1>chef-solo -j data_bag_test.json -c solo.rb</h1>

<p>Starting Chef Client, version 11.4.4
Compiling Cookbooks...
"data_bag is [bagbag]"
Converging 0 resources
Chef Client finished, 0 resources updated
#
```</p>

<p>上記のようにdata_bagの値が取得できれば成功。<br/>
秘密鍵をcookbooksとは別で管理することにより<br/>
漏洩してほしくない情報を暗号化することが可能になる。</p>

<p>とても便利。</p>

<h2>暗号化しないで保存するパターン (05/28 追記)</h2>

<p><code>--secret-file</code>鍵を指定しなければ暗号化はされない。</p>

<p>```</p>

<h1>knife solo data bag create data_hoge bag_hoge</h1>

<p>#</p>

<h1>knife solo data bag show data_hoge bag_hoge</h1>

<p>data: bagbag
id:   bag_hoge
#</p>

<h1>cat /root/chef/data_bags/data_hoge/bag_hoge.json</h1>

<p>{"name":"data_bag_item_data_hoge_bag_hoge","data_bag":"data_hoge","chef_type":"data_bag_item","raw_data":{"id":"bag_hoge","data":"bagbag"},"json_class":"Chef::DataBagItem"}
#
```</p>

<h3>recipe</h3>

<p>```
aws_keys = data_bag_item("data_hoge","bag_hoge")</p>

<p>p "data_bag is [#{hoge}]"
```</p>

<p>でいける</p>

<h3>あわせて読みたい</h3>

<p><a href="http://d.hatena.ne.jp/toritori0318/20130516/1368722444">アルパカchef日記３日目　data bagについて / またはユーザ管理クックブックなど -- アルパカDiary</a><br/>
大変勉強になるエントリーだ</p>
]]></content>
  </entry>
  
</feed>
