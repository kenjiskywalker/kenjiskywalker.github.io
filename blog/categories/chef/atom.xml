<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | さよならインターネット]]></title>
  <link href="http://blog.kenjiskywalker.org/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://blog.kenjiskywalker.org/"/>
  <updated>2015-02-11T02:52:22+09:00</updated>
  <id>http://blog.kenjiskywalker.org/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chefのruby_blockを利用してファイル更新時に条件によってログを出力する]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2014/03/28/chef-ruby-block/"/>
    <updated>2014-03-28T01:59:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2014/03/28/chef-ruby-block</id>
    <content type="html"><![CDATA[<p>Chefには冪等性という特徴がありますが、実際の運用では<br/>
ミドルウェアの設定の更新はしたいが、ミドルウェアの再起動までは<br/>
自分の手で確認したい。という条件もあるかと思います。</p>

<ul>
<li>設定ファイルは常に更新しても良い</li>
<li>設定ファイルが更新された時だけミドルウェアを起動したい</li>
<li>設定ファイルが更新された時にミドルウェアが起動済みであればログに出力</li>
</ul>


<p>上記条件を満たすために実施した内容について共有します。</p>

<ul>
<li>chef/site-cookbooks/apache/recipes/default.rb</li>
</ul>


<pre><code>template "/etc/httpd/conf/httpd.conf" do
  source "httpd.conf.erb"
  owner  "www"
  mode   0644
  notifies :run, "ruby_block[warn]", :immediately
end

ruby_block "warn" do
  block do

    # httpdが起動中であればログ出力
    unless `pgrep httpd` == ""
      print &lt;&lt;"EOS"

\e[33m===================================================================
recipe:apache

apacheが起動中です。
新しい設定を反映させるためにはapahceを再起動してください。
===================================================================\e[0m
EOS
    end
  end
  action :nothing
  notifies :start, "service[httpd]"
end

service "httpd" do
  action :enable
end
</code></pre>

<ol>
<li><code>/etc/httpd/conf/httpd.conf</code> が更新される</li>
<li><code>notifies :run, "ruby_block[warn]"</code>で<code>ruby_block</code>を実行</li>
<li><code>ruby_block</code>内でミドルウェアが起動中かどうかRubyのコードで条件分岐</li>
<li>起動中であればログを出力</li>
<li><code>ruby_block</code>で<code>notifies :start, "service[httpd]"</code>を実行、ミドルウェアの起動を行う</li>
</ol>


<p><code>ruby_block</code>は実行順序が最後になるというChefの設計上、<br/>
<code>notifies :start, "service[httpd]"</code>という方法を選択しました。</p>

<p>もう少しマシな方法があれば是非とも教えてください。<br/>
Chefは何か込み入ったことをしようとすると色々と工夫しないといけないのが難点ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefのnode[:hoge]をどうにかしたい]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/12/04/chef-merge-deep/"/>
    <updated>2013-12-04T14:26:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/12/04/chef-merge-deep</id>
    <content type="html"><![CDATA[<p>2013年オワコンの代表格として名指しされているChefですが<br/>
<strong>nodes/hoge.json</strong>で与えられた<code>node[:hoge]</code>の値を<br/>
<strong>roles/role.json</strong>で値を追加したい場合があります。<br/>
そのやり方として、オフィシャルにはディープマージという方法が載っていました。</p>

<p><a href="http://docs.opscode.com/essentials_node_object_deep_merge.html">http://docs.opscode.com/essentials_node_object_deep_merge.html</a></p>

<ul>
<li><p>nodes/hoge.json
<code>
{
"run_list": [ "role[role_one]" ]
}
</code></p></li>
<li><p>roles/role_one.json
<code>
{
"name": "role_one",
"description": "role one",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": [ "foo", "bar" ]
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "role[role_two]"
]
}
</code></p></li>
<li><p>roles/role_two.json
<code>
{
"name": "role_two",
"description": "role two",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": [ "baz" ]
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "recipe[hoge_recipe]"
]
}
</code></p></li>
<li><p>cookbooks/hoge_recipe/recipe/default.rb
<code>
node[:hoge].each do |h|
p h
end
</code></p></li>
</ul>


<p><code>role</code>で回せと。</p>

<p>ほかにも<a href="https://twitter.com/keita">@keita</a>氏に教えてもらったのですが<br/>
Key-Valueで渡せばいけるらしいです。</p>

<p><a href="https://coderanger.net/2013/06/arrays-and-chef/">Arrays and Chef Attributes - Noah Kantrowitz</a></p>

<ul>
<li><p>nodes/hoge.json
<code>
{
"hoge": {
    "foo": true,
    "bar": true
},
"run_list": [ "role[role_one]" ]
}
</code></p></li>
<li><p>roles/role_one.json
<code>
{
"name": "role_one",
"description": "role one",
"json_class": "Chef::Role",
"override_attributes": {
  "hoge": {
      "baz": true
  }
},
"default_attributes": {
},
"chef_type": "role",
"run_list": [
  "recipe[hoge_recipe]"
]
}
</code></p></li>
<li><p>cookbooks/hoge_recipe/recipe/default.rb
<code>
node[:hoge].each do |k,v|
p k
end
</code></p></li>
</ul>


<p>どちらも気持ち悪いので使いません。<br/>
よさ気な方法あれば教えて下さい。</p>

<p>Chef、Opscode社の経典みたいなcookbooksと<br/>
何がどこに書かれているかよくわからないドキュメントをのぞけば<br/>
2014年もよしなに使えるのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[plenvとperl-buildを走らせるchefのcookbookを書いた]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/08/31/plenv-chef-cookbook/"/>
    <updated>2013-08-31T03:03:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/08/31/plenv-chef-cookbook</id>
    <content type="html"><![CDATA[<p>perl-buildまでやるやつ書いた。</p>

<p>参考元：<a href="http://hirobanex.net/article/2013/06/1372382206">plenvによるPerl環境を構築するchefのオレオレサンプルレシピ - hirobanex.net</a></p>

<p><a href="https://github.com/kenjiskywalker/mychefrepo/tree/master/site-cookbooks/plenv">https://github.com/kenjiskywalker/mychefrepo/tree/master/site-cookbooks/plenv</a></p>

<p>これでchef使って一撃でPerlの環境用意できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chefの中身読んで、外部からrun_listを利用する]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/07/17/chef-run_list/"/>
    <updated>2013-07-17T00:29:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/07/17/chef-run_list</id>
    <content type="html"><![CDATA[<p>run_listを渡してるところを探した。<br/>
といってもほとんど<a href="https://twitter.com/soh335">@soh335</a>が教えてくれた。さすが一流エンジニアだ。</p>

<p><code>/chef/lib/chef/run_list.rb</code></p>

<pre><code>def expansion_for_data_source(environment, data_source, opts={})
  case data_source.to_s
  when 'disk'
    RunListExpansionFromDisk.new(environment, @run_list_items)
  when 'server'
    RunListExpansionFromAPI.new(environment, @run_list_items, opts[:rest])
  end
end
</code></pre>

<p>ここが怪しかった。</p>

<p><code>/chef/spec/unit/run_list_spec.rb</code></p>

<p>ここ見たら</p>

<pre><code>    describe "from disk" do
      it "should load the role from disk" do
        Chef::Role.should_receive(:from_disk).with("stubby")
        @run_list.expand("_default", "disk")
      end

      it "should log a helpful error if the role is not available" do
        Chef::Role.stub!(:from_disk).and_raise(Chef::Exceptions::RoleNotFound)
        Chef::Log.should_receive(:error).with("Role stubby (included by 'top level') is in the runlist but does not exist. Skipping expand.")
        @run_list.expand("_default", "disk")
      end
    end
</code></pre>

<p>こんなん書いてあった。</p>

<pre><code>#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
require 'json'
require 'chef/run_list'

json_file = "./json/yoshimasa.json"

host_config = JSON.parse(File.read(json_file))

Chef::Config[:cookbook_path] = '/root/chef/cookbook/'
Chef::Config[:role_path] = '/root/chef/json/'

run_list = Chef::RunList.new("recipe[nginx]", "role[hoge]")

p run_list
# #&lt;Chef::RunList:0x7f6fb8732510 @run_list_items=[#&lt;Chef::RunList::RunListItem:0x7f6fb87323d0 @type=:recipe, @version=nil, @name="nginx"&gt;, #&lt;Chef::RunList::RunListItem:0x7f6fb87323a8 @type=:role, @version=nil, @name="hoge"&gt;]&gt;

pp run_list.expand("_default", "disk")
# #&lt;Chef::RunList::RunListExpansionFromDisk:0x7f6fb8732100
#  @applied_roles={"hage"=&gt;true, "hoge"=&gt;true},
#  @default_attrs={},
#  @environment="_default",
#  @missing_roles_with_including_role=[],
#  @override_attrs={},
#  @recipes=["nginx", "postfix", "yum"],
#  @run_list_items=[],
#  @run_list_trace=
#   {"role[hoge]"=&gt;["role[hage]", "recipe[postfix]", "recipe[yum]"],
#    "top level"=&gt;["recipe[nginx]", "role[hoge]"]},
#  @source=nil&gt;

p run_list.expand("_default", "disk").recipes
# ["nginx", "postfix", "yum"]
</code></pre>

<p>こんな感じでrun_listを読める。何が便利かっていうと</p>

<pre><code>{
  "run_list": [
    "role[hage]"
  ]
}
</code></pre>

<pre><code>{
  "run_list": [
    "recipe[postfix]", "recipe[yum]"
  ]
}
</code></pre>

<pre><code>run_list = Chef::RunList.new("recipe[nginx]", "role[hoge]")

...
p run_list.expand("_default", "disk").recipes
# ["nginx", "postfix", "yum"]
</code></pre>

<p>という感じにroleの中のrun_listを読み込んでrecipesに突っ込んでくれる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chefで公開したくないJSONデータを暗号化するためにDataBagsを利用してみた記録]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/05/20/chef-databag/"/>
    <updated>2013-05-20T18:44:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/05/20/chef-databag</id>
    <content type="html"><![CDATA[<blockquote><p>ruby 1.8.7<br/>
chef 11.4.4<br/>
knife-solo_data_bag 0.3.2</p></blockquote>

<p>2013/05/20 現在</p>

<blockquote><p>knife-solo 0.2.0 では &ldquo;knife solo data bag&rdquo; は使えず<br/>
<a href="https://github.com/thbishop/knife-solo_data_bag">https://github.com/thbishop/knife-solo_data_bag</a> こちらを利用</p></blockquote>

<hr />

<h2>参考</h2>

<ul>
<li><a href="http://docs.opscode.com/essentials_data_bags.html">About Data Bags — Chef Docs</a></li>
<li><a href="http://docs.opscode.com/essentials_data_bags_encrypt.html">Encrypt a Data Bag — Chef Docs</a></li>
</ul>


<h2>knife-solo_data_bagのインストール</h2>

<pre><code># gem install knife-solo_data_bag 
# cd /root/chef/ ; pwd
</code></pre>

<h2>暗号化用の鍵を用意</h2>

<pre><code># openssl rand -base64 512 &gt; encrypted_data_bag_secret
</code></pre>

<h2>環境整備</h2>

<pre><code># mkdir /root/chef/data_bags
# cat /root/.chef/knife.rb
cookbook_path '/root/chef/cookbooks'
data_bag_path '/root/chef/data_bags'
encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret'
#
</code></pre>

<p>のような感じでknifeの設定を整えます</p>

<h2>data_bagをつくる</h2>

<pre><code>#
# knife solo data bag create data_hoge bag_hoge --secret-file ./encrypted_data_bags_secret
ERROR: RuntimeError: Please set EDITOR environment variable
#
# export EDITOR=vim
#
# knife solo data bag create data_hoge bag_hoge --secret-file ./encrypted_data_bags_secret
{
    "id": "bag_hoge",
  "data": "bagbag"
}
# 
# cat /root/chef/data_bags/data_hoge/bag_hoge.json
{
  "data_bag": "data_hoge",
  "chef_type": "data_bag_item",
  "name": "data_bag_item_data_hoge_bag_hoge",
  "json_class": "Chef::DataBagItem",
  "raw_data": {
    "id": "bag_hoge",
    "data": {
      "iv": "++q0Yc6EHUu8bdAxb/Ekuw==\n",
      "version": 1,
      "encrypted_data": "ErOwQM7QzvSJavsHPQovjwmRk7egm6EOCvDz2cUMd0Y=\n",
      "cipher": "aes-256-cbc"
    }
  }
}#
#
# knife solo data bag show data_hoge bag_hoge
data: bagbag
id:   bag_hoge
#
</code></pre>

<p><code>bag_hoge.json</code>の実ファイルを開いても中身は暗号化されている</p>

<h2>秘密鍵が利用されているか確認</h2>

<pre><code># cat /root/.chef/knife.rb
cookbook_path '/root/chef/cookbooks'
data_bag_path '/root/chef/data_bags'
# encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret' 

#
</code></pre>

<p>コメントアウトしてみる</p>

<pre><code>aws_keys = Chef::EncryptedDataBagItem.load(, secret)
# knife solo data bag show data_hoge bag_hoge
data:
  cipher:         aes-256-cbc
  encrypted_data: ErOwQM7QzvSJavsHPQovjwmRk7egm6EOCvDz2cUMd0Y=

  iv:             ++q0Yc6EHUu8bdAxb/Ekuw==

  version:        1
id:   bag_hoge
#
</code></pre>

<p>復号化されない。秘密鍵が使われていることがわかる</p>

<h2>recipeから呼び出す</h2>

<p><code>solo.rb</code></p>

<pre><code>file_cache_path '/tmp/chef-solo'
cookbook_path   '/root/chef/cookbooks'
data_bag_path   '/root/chef/data_bags'
encrypted_data_bag_secret '/root/chef/encrypted_data_bag_secret'
</code></pre>

<p><code>data_bag_path</code>と<code>encrypted_data_bag_secret</code>でファイルの位置をsoloに教える。</p>

<p><code>/root/chef/cookbooks/data_bag_test/recipes/default.rb</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data_bag = Chef::EncryptedDataBagItem.load(&lsquo;data_hoge&rsquo;,&lsquo;bag_hoge&rsquo;)
</span><span class='line'>hoge = data_bag[&lsquo;data&rsquo;]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p &ldquo;data_bag is [#{hoge}]&rdquo;</span></code></pre></td></tr></table></div></figure></p>

<p>こんな感じのrecipeをつくる</p>

<p><code>data_bag_test.json</code></p>

<pre><code>{
   "run_list": [
    "data_bag_test"
  ]
}
</code></pre>

<p>のようなテストJSONを作成し、chef-soloを走らせる</p>

<pre><code># chef-solo -j data_bag_test.json -c solo.rb
Starting Chef Client, version 11.4.4
Compiling Cookbooks...
"data_bag is [bagbag]"
Converging 0 resources
Chef Client finished, 0 resources updated
#
</code></pre>

<p>上記のようにdata_bagの値が取得できれば成功。<br/>
秘密鍵をcookbooksとは別で管理することにより<br/>
漏洩してほしくない情報を暗号化することが可能になる。</p>

<p>とても便利。</p>

<h2>暗号化しないで保存するパターン (05/28 追記)</h2>

<p><code>--secret-file</code>鍵を指定しなければ暗号化はされない。</p>

<pre><code># knife solo data bag create data_hoge bag_hoge
#
# knife solo data bag show data_hoge bag_hoge
data: bagbag
id:   bag_hoge
#
# cat /root/chef/data_bags/data_hoge/bag_hoge.json
{"name":"data_bag_item_data_hoge_bag_hoge","data_bag":"data_hoge","chef_type":"data_bag_item","raw_data":{"id":"bag_hoge","data":"bagbag"},"json_class":"Chef::DataBagItem"}
#
</code></pre>

<h3>recipe</h3>

<pre><code>aws_keys = data_bag_item("data_hoge","bag_hoge")

p "data_bag is [#{hoge}]"
</code></pre>

<p>でいける</p>

<h3>あわせて読みたい</h3>

<p><a href="http://d.hatena.ne.jp/toritori0318/20130516/1368722444">アルパカchef日記３日目　data bagについて / またはユーザ管理クックブックなど &ndash; アルパカDiary</a><br/>
大変勉強になるエントリーだ</p>
]]></content>
  </entry>
  
</feed>
