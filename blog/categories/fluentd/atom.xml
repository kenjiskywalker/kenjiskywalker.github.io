<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fluentd | さよならインターネット]]></title>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/categories/fluentd/atom.xml" rel="self"/>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/"/>
  <updated>2014-12-07T17:32:57+09:00</updated>
  <id>http://kenjiskywalker.github.com/kenjiskywalker/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flunetd、forward先がダメだった時にforward元である程度ログを担保したい]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/04/01/fluentd-buffer-forward/"/>
    <updated>2014-04-01T13:18:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/04/01/fluentd-buffer-forward</id>
    <content type="html"><![CDATA[<p>fluentdのbufferとforwardについて調べたのでメモ。</p>

<blockquote><p>fluentd v0.10.45</p></blockquote>

<h2>追記( 04/02 00:27)</h2>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> flushしようとしてできなかったbufferにもlimitまで溜まるから、1kbのbufferが128個で限界にはならないような気がしますが</p>&mdash; fujiwara (@fujiwara) <a href="https://twitter.com/fujiwara/statuses/451015148627456000">April 1, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/fujiwara">@fujiwara</a> 今手元で試したんですけどflush_interval関係なさそうですね。普通にflush_interval 1s buffer_chunk_limit 10とか指定してもそれ以上のbuffer保持してました</p>&mdash; kenjiskywalker (@kenjiskywalker) <a href="https://twitter.com/kenjiskywalker/statuses/451018249442836483">April 1, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/tagomoris">@tagomoris</a> <a href="https://twitter.com/fujiwara">@fujiwara</a> なるほど〜！</p>&mdash; ブラッド・ピット (@kenjiskywalker) <a href="https://twitter.com/kenjiskywalker/statuses/451019439786307585">April 1, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです。</p>

<p>こちらも参照してください。</p>

<p><a href="http://togetter.com/li/650177">fluentd の buffer あふれ改善議論 - togetter</a></p>

<p><code>flush_interval</code>はあくまでflushするだけであって<br/>
貯まる分は</p>

<p><code>buffer_chunk_limit x buffer_queue_limit</code></p>

<p>が影響する。ということですね。</p>

<p>update( 04/02 11:40 )</p>

<h2>参考</h2>

<p><a href="http://docs.fluentd.org/en/articles/buffer-plugin-overview">fluentd - Buffer Plugin Overview</a><br/>
<a href="http://d.hatena.ne.jp/tagomoris/20130123/1358929254">tagomorisのメモ置き場 - FluentdでバッファつきOutputPluginを使うときのデフォルト値</a></p>

<h3>構成</h3>

<ul>
<li>各ホストから集約サーバへ<code>foward</code>している</li>
<li>集約サーバはログを受け取ってゴニョゴニョしている</li>
</ul>


<h3>Buffer</h3>

<p><a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/buffer.rb#L116">BasicBuffer</a><br/>
<a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin/buf_file.rb#L76">FileBuffer</a><br/>
<a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin/buf_memory.rb#L67">MemoryBuffer</a></p>

<h4>buffer_chunk_limit</h4>

<p>FileBuffer = デフォルト(8MB)<br/>
MemoryBuffer = デフォルト(8MB)</p>

<h4>buffer_queue_limit</h4>

<p>FileBuffer = デフォルト(256)<br/>
MemoryBuffer = <a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin/buf_memory.rb#L76">64</a></p>

<h4>総バッファサイズ</h4>

<ul>
<li><p>FileBuffer<br/>
= 8 * 256 = 2048(2GB)</p></li>
<li><p>MemoryBuffer<br/>
= 8 * 64 = 512(512MB)</p></li>
</ul>


<h4>flush_interval</h4>

<p>flush_interval = デフォルト(<a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/output.rb#L175">60s</a>)</p>

<h3>Bufferされる値を算出する</h3>

<p><a href="http://docs.fluentd.org/en/articles/buffer-plugin-overview">fluentd - Buffer Plugin Overview</a></p>

<blockquote><p>When the top chunk exceeds the specified size or time limit<br/>
(buffer_chunk_limit and flush_interval, respectively),<br/>
a new empty chunk is pushed to the top of the queue.<br/>
The bottom chunk is written out immediately when new chunk is pushed.</p></blockquote>

<p>例えば</p>

<pre><code>&lt;match **&gt;
  type forward
  flush_interval 1s
  buffer_queue_limit 128
  buffer_chunk_limit 1g
  &lt;server&gt;
    host localhost
    port 24225
  &lt;/server&gt;
&lt;/match&gt;
</code></pre>

<p>と設定していた場合、<code>buffer_queue_limit 1G</code>と<code>flush_interval 1s</code>の<br/>
どちらかの閾値を超えた場合にflushされます。</p>

<blockquote><p>If the bottom chunk write out fails,<br/>
it will remain in the queue and Fluentd will<br/>
retry after waiting several seconds (retry_wait).<br/>
If the retry count exceeds the specified limit (retry_limit),<br/>
the chunk is trashed. The retry wait time doubles each time<br/>
(1.0sec, 2.0sec, 4.0sec, …).<br/>
If the queue length exceeds the specified limit (buffer_queue_limit),<br/>
new events are rejected.</p></blockquote>

<p>例えば上記設定例で</p>

<ul>
<li><code>forward</code>先にデータが転送できなかった</li>
<li>ログファイルは<code>1kB/sec</code>の書き込み</li>
</ul>


<p>である場合、<code>buffer_chunk_limit 1g</code>に達する前に<code>flush_interval 1s</code>に引っかかり<br/>
<code>flush_interval 1s</code> x <code>buffer_queue_limit 128</code>(128kB)分のバッファを確保した後<br/>
新しいqueueは受け付けられなくなるかと思いきや、flushはあくまでflushなので<br/>
バッファする量は</p>

<ul>
<li>buffer_chunk_limit x buffer_queue_limit</li>
</ul>


<p>で決まるとのこと。</p>

<p>forward時にログの転送元でどれだけのバッファを担保したいかは<br/>
ログの流量と転送元と転送先のスペックによって変わるので<br/>
みんなよしなにやっているのではないかと思います。</p>

<h3>forward</h3>

<p>結論から先に書いておくと</p>

<pre><code>&lt;match **&gt;
  type forward
  hard_timeout 180s
  phi_threshold 100
  &lt;server&gt;
    host a
    port 24224
  &lt;/server&gt;
  &lt;server&gt;
    host un
    port 24224
    standby
  &lt;/server&gt;
  &lt;secondary&gt;
    type file
    path /var/log/fluent/forward-failed
  &lt;/secondary&gt;
&lt;/match&gt;
</code></pre>

<p>上記のような冗長構成にできるのは、forward先が<br/>
いずれのサーバであっても同様の処理が行える時に限る。<br/>
ということです。</p>

<p>例えば<code>a</code>に障害があって<code>hard_timeout</code>で設定している<br/>
180秒を超えた場合、転送先が<code>un</code>に変わります。<br/>
しかし、結局<code>a</code>で処理していたログと<code>un</code>に流れたログを<br/>
どこかでmergeしたりする必要があるのであれば、<br/>
冗長構成を設定しない方が運用は楽かと。</p>

<p>デフォルトの設定であれば</p>

<ul>
<li>retry_limit <a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/output.rb#L177">17</a></li>
<li>retry_wait <a href="https://github.com/fluent/fluentd/blob/master/lib/fluent/output.rb#L178">1.0s</a></li>
</ul>


<p>となっており、最大<code>131072 sec</code>リトライしてくれます。<br/>
ログの流量によってはその前に</p>

<ul>
<li><code>buffer_chunk_limit</code> x <code>buffer_queue_limit</code></li>
</ul>


<p>上記の閾値に引っかかる可能性がありますが、<br/>
閾値に引っかかる前に<code>a</code>のサーバの状態を復活させた方が<br/>
オペレーション的には楽だと思います。</p>

<p>絶対ロストしてはいけないデータだから冗長構成は必須！！！<br/>
という場合はそもそもfluentdの冗長構成の前にやることがあると思います。</p>

<p>というようなことを書いたのですが、認識に誤りなどあれば<br/>
ご指摘頂ければ幸いです。</p>

<p><a href="http://togetter.com/li/650177">fluentd の buffer あふれ改善議論 - togetter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentd Casual Talks #3 でChefの話をしてきました #fluentdcasual]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/12/14/fluentd-casual-3/"/>
    <updated>2013-12-14T01:46:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/12/14/fluentd-casual-3</id>
    <content type="html"><![CDATA[<h2>Fluentd Casual Talks #3 で話してきました</h2>

<p>会場をご提供頂いたDeNAさん、主催者の@tagomorisさん、ありがとうございました。</p>

<p>スライドはこちらです。</p>

<script async class="speakerdeck-embed" data-id="b9dcc770460d0131db724af7eb411f76" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p></p>

<p>設定が増えてくると<code>td-agent.conf</code>自体が肥えてきます。<br/>
その場合、<code>include config.d/hoge.conf</code>というように<br/>
機能別に設定ファイルを分けることで、人間が管理できるようになります。</p>

<p>設定ファイルについては、必要な設定だけを人間が行って<br/>
ファイルの設置などについては、Chefに行ってもらうのが良いです。<br/>
Chefの設定方法についてはスライドを見てもらうとなんとなくわかるかなと思います。<br/>
ポイントは<code>include_recipe</code>を利用して、Chefのrecipe自体も分割するところです。</p>

<ul>
<li>chef/site-cookbook/td-agent/recipes/td-agent.conf</li>
</ul>


<pre><code>&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

include config.d/nginx.conf

&lt;match **&gt;
  type file
  path /tmp/unmatched
&lt;/match&gt;
</code></pre>

<ul>
<li>chef/site-cookbook/td-agent/recipes/nginx.conf</li>
</ul>


<pre><code>template "/etc/td-agent/config.d/nginx.conf" do
  owner "root"
  mode  0644
  source "nginx.conf.erb"
end
</code></pre>

<ul>
<li>chef/site-cookbooks/td-agent/templates/default/nginx.conf.erb</li>
</ul>


<pre><code>&lt;match nginx.access.**&gt;
  type copy
  &lt;store&gt;
    type file_alternative
    time_slice_format %Y%m%d-%H
    path /var/log/aggregated/nginx/access
    output_data_type attr:message
    localtime
    output_include_time false
  &lt;/store&gt;
&lt;/match&gt;

...
</code></pre>

<p>このように分割します。<code>nginx.rb</code>や<code>rds.rb</code>には<br/>
<code>nginx.conf</code>や<code>rds.conf</code>を生成するためのテンプレートが書かれています。<br/>
スライド内の<code>s3cmd</code>の箇所を参照して頂ければ、どんな感じかわかると思います。</p>

<p>世界を前進させるスーパーな話も良いですが、増えすぎる設定ファイルを<br/>
どう管理するか。みたいな話があっても良いのではないかと思い<br/>
発表するに至りました。みなさんも良い管理方法などあれば<br/>
是非とも教えて下さい。</p>

<p>また、わからないことがあれば気軽に@kenjiskywalkerや、<br/>
kenji at kenjiskywalker.orgに聞いて下さい。</p>

<p>fluentdのように設定が多岐に渡る場合などは<br/>
Chefやpupet、Ansibleのような設定管理ツールを利用するのが良いですね。</p>

<p>ライブリリース２本、ライブ感あってよかったですね。<br/>
おつかれさまでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-cloudwatch 1.2.4 release]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/09/25/fluent-plugin-cloudwatch-1-2-4/"/>
    <updated>2013-09-25T23:06:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/09/25/fluent-plugin-cloudwatch-1-2-4</id>
    <content type="html"><![CDATA[<h3><a href="https://rubygems.org/gems/fluent-plugin-cloudwatch">https://rubygems.org/gems/fluent-plugin-cloudwatch</a></h3>

<p>リリースしました。<br/>
CloudWatchのAPIが、値なしでレスポンス返してくることはよくあったのですが、<br/>
リクエストに対してレスポンスが取得できずに詰まってしまう現象があり、<br/>
その解決策としてtimeoutを追加しました。<br/>
同現象でお悩みの方はバージョンアップをお願いいたします。</p>

<blockquote><p>本件でアドバイスを頂いたfujiwaraさん有難うございます。</p></blockquote>

<p>また、td-agentの<code>version 1.1.17</code>から正式に<code>configtest</code>が導入され<br/>
設定に誤りがあった場合、エラー内容が出力され、<br/>
<code>reload</code>、および<code>restart</code>が走らないようになっています。</p>

<p>この変更により、運用中の設定ファイルの更新作業も楽しく行えるかと思います。</p>

<p>合わせてアップデートをおすすめいたします。<br/>
@repeatedly++</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluentdのプラグインを書く練習をする為にsecureログをparseしてZabbixで値が取得できるようにしてみた(設定編)]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/01/20/fluentd-plugin-create-newbie/"/>
    <updated>2013-01-20T18:56:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/01/20/fluentd-plugin-create-newbie</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kenjiskywalker/fluent-plugin-securelog-parser">https://github.com/kenjiskywalker/fluent-plugin-securelog-parser</a></p>

<pre>
   ,j;;;;;j,. ---一､ ｀   ―--‐､_ l;;;;;;  
  ｛;;;;;;ゝ T辷iﾌ i      f'辷jァ   !i;;;;;    全く触ったことがなくてもpluginを書いたらfluentdがわかる  
   ヾ;;;ﾊ        ﾉ              .::!lﾘ;;rﾞ  
     `Z;i      〈.,_..,.            ﾉ;;;;;;;;>    そんなふうに考えていた時期が  
     ,;ぇﾊ、  ､_,.ｰ-､_',.      ,ｆﾞ: Y;;f.      俺にもありました  
     ~''戈ヽ    ｀二´      r'´:::.  `!  
</pre>


<p>最初Postfixのmaillogつくってやろうかなんて<br/>
思っていたりした時期もオレにはありました。</p>

<p>しかしログが多様すぎるので、ちょっとこれ最初にやるには敷居高いなー<br/>
と思い、だからってあんまり理にかなわないことをしても意味ないな<br/>
ということで、<code>/var/log/secure</code>のログを指定した文字列の出現具合を<br/>
Zabbixで取得したら面白いかなというアイデアが思いついたので<br/>
取り敢えずコードは汚いにしろ、動くまで書いてみたメモです。</p>

<p><a href="http://blog.kenjiskywalker.org/blog/2013/01/20/fluentd-plugin-create-newbiee/">プラグイン作成編はこちらから</a></p>

<h2>テスト環境</h2>

<p><code>/etc/fluent-agent-lite.conf</code>
<code>
/etc/fluent-agent-lite.conf
TAG_PREFIX=""
LOGS=$(cat &lt;&lt;"EOF"
secure                   /var/log/secure
EOF
)
PRIMARY_SERVER="0.0.0.0:24224"
</code></p>

<p><code>/etc/td-agent/td-agent.conf</code></p>

<pre><code>&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

&lt;match secure&gt;
  type securelog-parser
  tag  seclog.local
&lt;/match&gt;

&lt;match seclog.*&gt;
  type copy
   &lt;store&gt;
    type datacounter
    count_key message
    aggregate all
    tag check.seclog
    pattern1 acce Accepted
    pattern2 fail failure
    pattern3 inva Invalid
  &lt;/store&gt;
  &lt;store&gt;
   type file
   path /tmp/hoge
  &lt;/store&gt;
&lt;/match&gt;

&lt;match check.**&gt;
  type copy
  &lt;store&gt;
    type file
    path /var/log/td-agent/check_seclog
  &lt;/store&gt;
  &lt;store&gt;
    type             zabbix
    zabbix_server    192.0.2.2
    host             watashi
    name_key_pattern (fail|acce|inva)_count
    add_key_prefix   securelog
  &lt;/store&gt;
&lt;/match&gt;
</code></pre>

<h2>環境および設定内容の解説</h2>

<h2><code>fluent-agent-lite</code></h2>

<p><code>in_tail</code>で見に行くとパーミッションが足りないとのことなので<br/>
fluent-agent-liteを噛ましました。</p>

<p>localhostに転送するので
<code>PRIMARY_SERVER="0.0.0.0:24224"</code>として自分自身へ転送。</p>

<h2><code>td-agent</code></h2>

<p><code>fluent-agent-lite</code>から値を取得。
<code>
&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;
</code></p>

<h3>自作pluginを通す</h3>

<p><code>fluent-agent-lite</code>で付与した<code>secure</code>のタグをmatchさせて<br/>
自作したテスト用のpluginへ渡します。
<code>
&lt;match secure&gt;
  type securelog-parser
  tag  seclog.local
&lt;/match&gt;
</code></p>

<h3>fluent-plugin-datacounterを通す</h3>

<p><code>seclog.*</code>にmatchさせ</p>

<p>もりす先生の<a href="https://github.com/tagomoris/fluent-plugin-datacounter">fluent-plugin-datacounter</a>を利用し<br/>
それぞれ確認したいログのpatternを登録します。</p>

<pre><code>&lt;match seclog.*&gt;
  type copy
   &lt;store&gt;
    type datacounter
    count_key message
    aggregate all
    tag check.seclog
    pattern1 acce Accepted
    pattern2 fail failure
    pattern3 inva Invalid
  &lt;/store&gt;
  &lt;store&gt;
   type file
   path /tmp/hoge
  &lt;/store&gt;
&lt;/match&gt;
</code></pre>

<ul>
<li><p><code>pattern1 acce Accepted</code><br/>
接続が許可されたログ(Acceptedという文字列を含んだログ)を<br/>
<em>pattern1</em>として<em>acce</em>というprefixで渡します。</p></li>
<li><p><code>pattern2 fail failure</code><br/>
接続に失敗したログ(failureという文字列を含んだログ)を<br/>
<em>pattern2</em>として<em>fail</em>というprefixで渡します。</p></li>
<li><p><code>pattern3 inva Invalid</code><br/>
無効な接続のログ(Invalidという文字列を含んだログ)を<br/>
<em>pattern3</em>として<em>inva</em>というprefixで渡します。</p></li>
</ul>


<p>また、デバッグの為に、<code>/tmp/hoge</code>ファイルへ<br/>
現時点での状態をファイル出力しておきます。</p>

<pre><code>2013-01-20T18:12:24+09:00       seclog.local    {"message":"Accepted publickey for hogehoge from 192.0.2.100 port 64884 ssh2"}
2013-01-20T18:12:24+09:00       seclog.local    {"message":"pam_unix(sshd:session): session opened for user hogehoge by (uid=0)"}
2013-01-20T18:12:28+09:00       seclog.local    {"message":"Received disconnect from 192.0.2.100: 11: disconnected by user"}
</code></pre>

<p>上記のような内容で、出力されています。<br/>
この時点で期待した内容のログ出力がされていない場合は<br/>
どこかに誤りがあるので、修正していく流れになります。</p>

<h3>fluent-plugin-zabbixへデータを渡す</h3>

<p>fujiwaraさん作成の<a href="https://github.com/fujiwara/fluent-plugin-zabbix">fluent-plugin-zabbix</a>を利用し、Zabbixへデータを渡します。</p>

<pre><code>&lt;match check.**&gt;
  type copy
  &lt;store&gt;
    type file
    path /var/log/td-agent/check_seclog
  &lt;/store&gt;
  &lt;store&gt;
    type             zabbix
    zabbix_server    192.0.2.2
    host             watashi
    name_key_pattern (fail|acce|inva)_count
    add_key_prefix   securelog
  &lt;/store&gt;
&lt;/match&gt;
</code></pre>

<p><code>/tmp/hoge</code>へのデバッグ出力と同様に<br/>
<em>fluent-plugin-datacounter</em>を通したログを<br/>
<code>/var/log/td-agent/check_seclog</code>へ出力しておきます。
<code>
  &lt;store&gt;
    type file
    path /var/log/td-agent/check_seclog
  &lt;/store&gt;
</code>
こちらも、値が正常に取得されているかを確認します。
<code>
2013-01-20T18:09:56+09:00       check.seclog    {"unmatched_count":4,"unmatched_rate":0.06,"unmatched_percentage":66.66666666666667,"acce_count":0,"acce_rate":0.0,"acce_percentage":0.0,"fail_count":0,"fail_rate":0.0,"fail_percentage":0.0,"inva_count":2,"inva_rate":0.03,"inva_percentage":33.333333333333336}
2013-01-20T18:10:56+09:00       check.seclog    {"unmatched_count":0,"unmatched_rate":0.0,"acce_count":0,"acce_rate":0.0,"fail_count":0,"fail_rate":0.0,"inva_count":0,"inva_rate":0.0}
2013-01-20T18:11:56+09:00       check.seclog    {"unmatched_count":0,"unmatched_rate":0.0,"acce_count":0,"acce_rate":0.0,"fail_count":0,"fail_rate":0.0,"inva_count":0,"inva_rate":0.0}
2013-01-20T18:12:56+09:00       check.seclog    {"unmatched_count":14,"unmatched_rate":0.23,"unmatched_percentage":73.6842105263158,"acce_count":4,"acce_rate":0.06,"acce_percentage":21.05263157894737,"fail_count":0,"fail_rate":0.0,"fail_percentage":0.0,"inva_count":1,"inva_rate":0.01,"inva_percentage":5.2631578947368425}
</code></p>

<ul>
<li><p><code>zabbix_server    192.0.2.2</code>
zabbixサーバのIPアドレスを指定します。</p></li>
<li><p><code>host             watashi</code>
データ送り元のホスト名を指定します。</p></li>
<li><p><code>name_key_pattern (fail|acce|inva)_count</code><br/>
<em>name_key_pattern (fail|acce|inva)_count</em>の設定と<br/>
<em>add_key_prefix   securelog</em>の設定は</p></li>
</ul>


<p><a href="https://dl.dropbox.com/u/5390179/6c2da543eb8312cd496ef8f75fb8d83d.png"><img src="https://dl.dropbox.com/u/5390179/6c2da543eb8312cd496ef8f75fb8d83d.png" alt="zabbix" /></a></p>

<p>Zabbixで、itemを上記設定のように作成し<br/>
trapperのデータとしてZabbixが受け取れる為に設定します。</p>

<h3>Zabbixでグラフ化</h3>

<p>Zabbix上で上手く値が取得できていれば</p>

<p><a href="https://dl.dropbox.com/u/5390179/107d6802dbac9f28c4b78819242d3018.png"><img src="https://dl.dropbox.com/u/5390179/107d6802dbac9f28c4b78819242d3018.png" alt="zabbix" /></a></p>

<p>このようにグラフに値が出力され、期待通りの動作をすることが確認できました。</p>

<p>awesome fluentd!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluentdのプラグインを書く練習をする為にsecureログをparseしてZabbixで値が取得できるようにしてみた(作成編)]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/01/20/fluentd-plugin-create-newbiee/"/>
    <updated>2013-01-20T17:03:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2013/01/20/fluentd-plugin-create-newbiee</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kenjiskywalker/fluent-plugin-securelog-parser">https://github.com/kenjiskywalker/fluent-plugin-securelog-parser</a></p>

<pre>
   ,j;;;;;j,. ---一､ ｀   ―--‐､_ l;;;;;;  
  ｛;;;;;;ゝ T辷iﾌ i      f'辷jァ   !i;;;;;    全く触ったことがなくてもpluginを書いたらfluentdがわかる  
   ヾ;;;ﾊ        ﾉ              .::!lﾘ;;rﾞ  
     `Z;i      〈.,_..,.            ﾉ;;;;;;;;>    そんなふうに考えていた時期が  
     ,;ぇﾊ、  ､_,.ｰ-､_',.      ,ｆﾞ: Y;;f.      俺にもありました  
     ~''戈ヽ    ｀二´      r'´:::.  `!  
</pre>


<p>最初Postfixのmaillogつくってやろうかなんて<br/>
思っていたりした時期もオレにはありました。</p>

<p>しかしログが多様すぎるので、ちょっとこれ最初にやるには敷居高いなー<br/>
と思い、だからってあんまり理にかなわないことをしても意味ないな<br/>
ということで、<code>/var/log/secure</code>のログを指定した文字列の出現具合を<br/>
Zabbixで取得したら面白いかなというアイデアが思いついたので<br/>
取り敢えずコードは汚いにしろ、動くまで書いてみたメモです。</p>

<p><a href="http://blog.kenjiskywalker.org/blog/2013/01/20/fluentd-plugin-create-newbie/">設定編はこちら</a></p>

<h1>作成編</h1>

<p>事前にtestが通るまでのものは<br/>
<a href="http://blog.kenjiskywalker.org:8080/blog/2013/01/05/fluent-pluing/">超初級！Fluentdのプラグインを書きたくなった時の下地づくり</a>にて作成しています。</p>

<p>本来はもっとスマートな作り方があるのでしょうが、<br/>
私は基本的にこの流れで行いました。</p>

<ul>
<li>内容を更新する度にrake testでtestが通ることを確認する</li>
<li>変数の状況を<code>p hoge</code>で毎回確認する</li>
</ul>


<p>この2つの繰り返しでした。</p>

<h3>参考</h3>

<ul>
<li><a href="http://gihyo.jp/magazine/SD/archive/2012/201206">@repeatedlyさんのプラグイン作成の記事 / Software Design 2012年6月号</a></li>
<li><a href="http://docs.fluentd.org/articles/plugin-development">Writing plugins / fluentd</a></li>
<li><a href="http://d.hatena.ne.jp/mikeda/20120704/1341363870">検証中のtd-agent（fluentd）の設定とか負荷とか / IT 東京 楽しいと思うこと</a></li>
<li><a href="http://d.hatena.ne.jp/erukiti/20120205/1328452455">fluentdのプラグインは簡単に作成できる / ぽにくすじゃないだいありー</a></li>
<li><a href="http://fluentd.org/plugin/">Fluentd plugins</a></li>
</ul>


<p>基本はりぴーさんの記事を参考に、取り敢えず片っ端からpluginのソースを読んでいけば<br/>
センスの良い人ならその場で書けそうなものですが、いかんせん素人なので<br/>
試行錯誤しながら書いて行きました。</p>

<p>取り敢えず動いたレベルですが、何かの参考になればと思います。</p>

<p><a href="https://github.com/kenjiskywalker/fluent-plugin-securelog-parser">https://github.com/kenjiskywalker/fluent-plugin-securelog-parser</a></p>

<p>また、ソースを見て頂く通り、何かのログのパーサを書こうと思えば<br/>
<em>regexp</em>と<em>time_format</em>さえどうにかなれば、<br/>
プラグインの種類にもよりますが、いくらでも加工することが可能です。<br/>
fluentd、素晴らしいですね。</p>

<blockquote><p><em>tag</em>、<em>es</em>、<em>chain</em>の中身などを<em>.each</em>などで分解していき<br/>
testを実行した際に(<em>test_emit</em>)で<br/>
プラグイン内部の確認したい変数の中身を<code>p hoge</code>する。</p></blockquote>

<p>この繰り返していってという感じです。<br/>
ソースファイルのコメントアウト部は<br/>
コードを記述していた際には常に表示させていたものです。</p>

<p>サーバ上での動作のテストは<br/>
<code>out_securelog_parser.rb</code>ファイルを<code>/etc/td-agent/plugin/</code>へ配置することで<br/>
プラグインとして認識してくれます。素晴らしいですね。</p>

<p>ログが出るのを待つのは大変なので<br/>
<code>
echo '{"message":"Jan 17 02:47:59 hostname sshd[10654]: test"}' | /usr/lib64/fluent/ruby/bin/fluent-cat secure
</code>
と、<code>fluent-cat</code>コマンドを実行して、確認したい<em>tag</em>を指定することで<br/>
プラグインの確認を行うことが可能です。</p>

<p>ちゃんとテストを書いていないあｗ、中身はまだまだ改善の余地があるわでアレですが<br/>
Rubyもよくに書けず、fluentdを運用した経験もあまりない人間が<br/>
稚拙ではありますが、最低限動作するところまでは書くことができました。</p>

<p>ハイユーザーから、エントリーユーザまで利用でき、<br/>
かつ、簡単なログパーサから、各種メトリクス生成などのプラグインが<br/>
容易に作成することができるfluentdは、やはりこれからのオペレーションの<br/>
情報取得ツールとして、無くてはならないものになっていくんだろうな。<br/>
という印象を受けました。</p>

<p>awesome fluentd!</p>

<p>続きは<a href="http://blog.kenjiskywalker.org/blog/2013/01/20/fluentd-plugin-create-newbie/">設定編</a>で</p>
]]></content>
  </entry>
  
</feed>
