<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | さよならインターネット]]></title>
  <link href="http://blog.kenjiskywalker.org/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://blog.kenjiskywalker.org/"/>
  <updated>2015-08-03T12:38:43+09:00</updated>
  <id>http://blog.kenjiskywalker.org/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[負荷テストが気軽に行えるsiegeでちょっとハマった]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2015/02/13/siege/"/>
    <updated>2015-02-13T18:06:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2015/02/13/siege</id>
    <content type="html"><![CDATA[<blockquote><p>siege: version 3.0.9</p></blockquote>

<h2>TL;DR</h2>

<p>httpsのリクエストの際にうんともすんともいわなくて、lddで見たら<br/>
opensslのライブラリ読み込んでなかった。</p>

<h2>Siege</h2>

<ul>
<li><a href="http://www.joedog.org/siege-home/">Siege Home</a></li>
<li><a href="http://qiita.com/inokappa/items/84f42dbd718a8070bd1d">Siege でお手軽 Web 負荷テスト - Qiita</a></li>
</ul>


<p>詳しくは上記URLを参照してください。</p>

<p>kappa大先生の記事を見て、これいいやん！ってなって導入した。<br/>
負荷テストをかけるサーバも今ではAWSのスポットインスタンスを利用すれば<br/>
c3.4xlargeも$0.5/hで借りれて最高だ。</p>

<h2>インストール</h2>

<pre><code># gccが必要なのでインストール
$ yum install gcc

$ wget http://download.joedog.org/siege/siege-3.0.9.tar.gz
$ tar xzf siege-3.0.9.tar.gz
$ cd siege-3.0.9
$ ./configure
$ make -j 16
$ make install
</code></pre>

<h3>HTTPSにつながらない?</h3>

<pre><code>$ siege -c 1 -t 2S http://example.com/
** SIEGE 3.0.9
** Preparing 1 concurrent users for battle.
The server is now under siege...
HTTP/1.1 200   0.69 secs:    5121 bytes ==&gt; GET  /
HTTP/1.1 200   0.68 secs:    5123 bytes ==&gt; GET  /

Lifting the server siege...      done.

Transactions:                      0 hits
Availability:                   0.00 %
Elapsed time:                   1.00 secs
Data transferred:               0.00 MB
Response time:                  0.00 secs
Transaction rate:               0.00 trans/sec
Throughput:                     0.00 MB/sec
Concurrency:                    0.01
Successful transactions:           1
Failed transactions:               0
Longest transaction:            0.01
Shortest transaction:           0.01

FILE: /root/siege.log
You can disable this annoying message by editing
the .siegerc file in your home directory; change
the directive 'show-logfile' to false.
$
</code></pre>

<p>では応答したのに</p>

<pre><code>$ siege -c 1-t 2S https://example.com/
** SIEGE 3.0.9
** Preparing 1 concurrent users for battle.
The server is now under siege...
Lifting the server siege...      done.

Transactions:                      0 hits
Availability:                   0.00 %
Elapsed time:                   4.68 secs
Data transferred:               0.00 MB
Response time:                  0.00 secs
Transaction rate:               0.00 trans/sec
Throughput:                     0.00 MB/sec
Concurrency:                    0.00
Successful transactions:           0
Failed transactions:               3
Longest transaction:            0.00
Shortest transaction:           0.00

FILE: /root/siege.log
You can disable this annoying message by editing
the .siegerc file in your home directory; change
the directive 'show-logfile' to false.
$
</code></pre>

<p>などとFailedになってしまった。<br/>
最初、cookieで認証しているのでcookieの渡し方が悪かったのかと思ったが<br/>
ふとライブラリちゃんと読み込んでいるのか気になったので確認してみた。</p>

<pre><code>$ ldd /usr/local/bin/siege
        linux-vdso.so.1 =&gt;  (0x00007fff0a7fe000)
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fe27e031000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fe27dc8c000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fe27e253000)
$
</code></pre>

<p>おや&hellip; <br/>
ということで<code>yum install openssl-devel</code>をしてから再度インストールしなおす。</p>

<pre><code>$ ldd /usr/local/bin/siege
        linux-vdso.so.1 =&gt;  (0x00007fff3a561000)
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f77766e2000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f77764de000)
        libssl.so.10 =&gt; /usr/lib64/libssl.so.10 (0x00007f7776270000)
        libcrypto.so.10 =&gt; /lib64/libcrypto.so.10 (0x00007f7775e8c000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f7775ae7000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f7776904000)
        libgssapi_krb5.so.2 =&gt; /lib64/libgssapi_krb5.so.2 (0x00007f77758a3000)
        libkrb5.so.3 =&gt; /lib64/libkrb5.so.3 (0x00007f77755be000)
        libcom_err.so.2 =&gt; /usr/lib64/libcom_err.so.2 (0x00007f77753bb000)
        libk5crypto.so.3 =&gt; /lib64/libk5crypto.so.3 (0x00007f777518f000)
        libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f7774f79000)
        libkrb5support.so.0 =&gt; /lib64/libkrb5support.so.0 (0x00007f7774d6e000)
        libkeyutils.so.1 =&gt; /lib64/libkeyutils.so.1 (0x00007f7774b6a000)
        libresolv.so.2 =&gt; /lib64/libresolv.so.2 (0x00007f7774953000)
        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f777473d000)
        libselinux.so.1 =&gt; /usr/lib64/libselinux.so.1 (0x00007f777451b000)
$
</code></pre>

<p>おお、色々読み込んでいる</p>

<h2>改めて確認</h2>

<pre><code>$ siege -c 1 -t 3S https://example.com/
** SIEGE 3.0.9
** Preparing 1 concurrent users for battle.
The server is now under siege...
HTTP/1.1 200   0.78 secs:    5119 bytes ==&gt; GET  /

Lifting the server siege...      done.

Transactions:                      1 hits
Availability:                 100.00 %
Elapsed time:                   2.89 secs
Data transferred:               0.00 MB
Response time:                  0.78 secs
Transaction rate:               0.35 trans/sec
Throughput:                     0.00 MB/sec
Concurrency:                    0.27
Successful transactions:           1
Failed transactions:               0
Longest transaction:            0.78
Shortest transaction:           0.78

FILE: /root/siege.log
You can disable this annoying message by editing
the .siegerc file in your home directory; change
the directive 'show-logfile' to false.
$
</code></pre>

<p>無事レスポンスを取得することができた。</p>

<h3>cookieの渡し方</h3>

<p><code>--header="Cookie: k=v; k=v;"</code>みたいな渡し方でいけた。</p>

<pre><code>$ siege -c 1 -t 3S https://example.com/ --header="Cookie: key_one=value_one; domain=.example.com; path=/; expires=Fri, 13 Feb 2015 16:41:26 -0000; key_two=value_two; path=/;"
</code></pre>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起動時にresolv.confが何者かに上書きされた時に更に上書きをする戦い]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2015/02/07/update-resolv-conf/"/>
    <updated>2015-02-07T17:41:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2015/02/07/update-resolv-conf</id>
    <content type="html"><![CDATA[<blockquote><p>みんなこういうのはどういう対応しているんだろう</p></blockquote>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> PEERDNS=noを/etc/sysconfig/network-scripts/ifcfg-ethXに書くとか</p>&mdash; TSUNEMATSU Shinya (@tnmt) <a href="https://twitter.com/tnmt/status/564019209189851136">February 7, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>常松先生が一瞬で解決方法を教えてくれました。<br/>
ありがとうございます！</p>

<h2>resolv.confが圧倒的暴力によって上書きされる場合</h2>

<p>対応として<code>resolv-update</code>みたいな雑なサービス定義をして、サーバ起動時に実行させるようにした。<br/>
ポイントはcloud-initとかそれ系のヤツが実行される前に上書いてもその後に上書きされるのでタイミングが大切。</p>

<p>ここの</p>

<pre><code># chkconfig: 2345 49 49
</code></pre>

<p><code>49 49</code>の最初の数字が起動時に実行される順番で、後ろの数字が終了時に実行される順番。</p>

<pre><code>$ chkconfig --add resolv-update
</code></pre>

<p>とすることで自動に実行されるようになる。</p>

<p>runlevel 3のものを確認したければ<code>/etc/rc3.d/</code>とか見ればわかる。</p>

<pre><code>#!/bin/sh
#
# resolv-update
# create by kenjiskywalker
#
# chkconfig: 2345 49 49
# description: resolv-update

lock_file="/var/lock/subsys/resolv-update"
redis_port="6379"

start()
{
    # lock_fileを生成しないとshutdownの時に実行されない
    touch ${lock_file}

    # 圧倒的暴力によってresolv.confが上書きされていたら更に上書きする
    if [[ -z "`grep 'nameserver 127.0.0.1' /etc/resolv.conf`" ]]
    then
        sed -i '1s/^/nameserver 127.0.0.1\n/' /etc/resolv.conf
    fi
}

stop()
{
    # lock_fileの削除
    rm -r ${lock_file}
}

case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    *)
        echo "Usage: $0 {start|stop}"
    ;;
esac

exit 0
</code></pre>

<p>Systemd？はて？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[serverspecをJenkins氏で回す場合について]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/06/30/serverspec-jenkins/"/>
    <updated>2013-06-30T02:47:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/06/30/serverspec-jenkins</id>
    <content type="html"><![CDATA[<p>今流行りの<a href="http://serverspec.org/">serverspec</a>、みなさんどうやって活用しているのでしょうか。<br/>
インフラもCIだ！みたいな話最近よく聞くので、CIといえばJenkins！<br/>
的な感じで試してみました。</p>

<p>ほんのさわり程度やってみたところで、工夫が必要だと感じたのは<br/>
Jenkinsをどうやって回すか。という根本的なところです。</p>

<p>Jenkinsのアカウントをsudo許可するのか、別アカウントを用意するのか、<br/>
もうなんだったらルート権限付与してしまうのか。色々方法はあるかと思います。</p>

<p>ほんのさわり程度ですが、良さそうだなと感じたのは<br/>
<a href="https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin">Publish Over SSH Plugin</a>このプラグインを利用して<br/>
NOPASS sudo権限のあるアカウントを作成し、秘密鍵を設定して<br/>
Jenkins用のアカウントとしてSSHログインさせてテストを回すのが良いかなと。</p>

<p><img src="https://dl.dropboxusercontent.com/u/5390179/ea0d7aa2ae77caf8623cead6fdfa522e.png" alt="https://dl.dropboxusercontent.com/u/5390179/ea0d7aa2ae77caf8623cead6fdfa522e.png" /></p>

<p>ほんのさわり程度なので、もっと良い方法ありそうですね。</p>

<p>あと<a href="https://wiki.jenkins-ci.org/display/JENKINS/IRC+Plugin">IRC Plugin</a>これ、動かなくて<br/>
どっちかっていうとIRCでserverspecのテストの結果チラチラ見たいんんだよぉ〜<br/>
むしろその為にやってたんだよぉ〜ってなって、3時間ぐらいああだこうだやってて<br/>
なんで〜！！！ってなってたけど</p>

<ul>
<li><a href="http://ikasama.hateblo.jp/entry/2011/12/21/033421">Jenkins casual notification using Remote access API / 烏賊様</a></li>
</ul>


<p>ikasam_aさんのおかげでできるようになった！！！ありがたい！！！<br/>
もうちょっと触っていったら色々やりたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらVPSでOctopress]]></title>
    <link href="http://blog.kenjiskywalker.org/blog/2013/01/02/ocococtopress/"/>
    <updated>2013-01-02T19:34:00+09:00</updated>
    <id>http://blog.kenjiskywalker.org/blog/2013/01/02/ocococtopress</id>
    <content type="html"><![CDATA[<p>新年あけましておめでとうございます。<br/>
年初めは意識高いのでやろうと思ってたこと実行するのに良い機会ですね。</p>

<p>ということで<a href="http://octopress.org/">Octopress</a>を入れてみました。</p>

<h3>手順</h3>

<h4>1. nginxの設定</h4>

<p><code>nginx.conf</code>に下記内容を記述</p>

<pre><code>server {
    listen 8080;
    server_name blog.kenjiskywalker.org;
    root /home/blog/;
    index index.html;
    access_log /var/log/nginx/blog/access_log skywalker;
    error_log  /var/log/nginx/blog/error_log  error;
</code></pre>

<p><code>8080</code>なのは、フロントにvarnishがいるから。<br/>
これで <em>blog.kenjiskywalker.org</em> にアクセスが来たら<br/>
<code>/home/blog/</code>のディレクトリを見に行くようになる。</p>

<h4>2. オフィシャルのドキュメントを読みながらOctopressの設定</h4>

<p><a href="http://java.com/en/download/apple_manual.jsp">Octopress Setup</a></p>

<p>とくに躓くところはなし。</p>

<p><a href="http://octopress.org/docs/deploying/">Deploying</a></p>

<p>さくらVPSで運用する予定なので<br/>
<a href="http://octopress.org/docs/deploying/rsync/">Deploying With Rsync</a>を読みながら作業。問題なし。</p>

<p><code>Rakefile</code>はnginxにて設定したように</p>

<pre><code>document_root  = "/home/blog/" 
</code></pre>

<p><code>/home/blog/</code>を記述。</p>

<p><a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<p>最低限の設定を行った。
この辺はもうちょっといじくりたい。</p>

<ul>
<li>右サイドバーにGithubのリポジトリ表示したり</li>
<li>Twitterのストリーミング流したり</li>
<li>Google Analyticsの設定したりするのもここで行える</li>
</ul>


<p>カスタマイズページを右上に表示してみたかったので</p>

<pre><code>default_asides: [asides/about.html, 
</code></pre>

<p>と<em>about.html</em>の設定を追記して</p>

<p><code>/source/_includes/asides/about.html</code>にファイルを設置。</p>

<p>参考：<a href="http://qiita.com/items/ac729ec076f477f05ac6">Octopressでサイドバーに簡易プロフィールを表示させよう！</a></p>

<h4>3. Glide Noteさんを参考にvimの設定</h4>

<p><a href="http://blog.glidenote.com/blog/2012/04/02/octoeditor.vim/">Octopressの記事管理用プラグイン、Octoeditor.vimを作った</a></p>

<p>神様。このエントリーもOctoeditor.vim使って書かせてもらっています！</p>

<h4>4. 記事を書いて確認してみる</h4>

<pre><code>$ rake generate
で、source/配下の(記事であればsource/_post/)ファイルをよしなにpublicへゴリゴリしながらつくりあげて

$ rake preview
で、localhost:4000で確認

$ rake deploy
問題がなければデプロイでfinish！
</code></pre>

<p>上記コマンドはすべてOctoeditorで完結しているのですが<br/>
念の為コマンドを打ってみて動きを確認。</p>

<p>deploy先で正常に閲覧できればOKです。</p>
]]></content>
  </entry>
  
</feed>
