<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[さよならインターネット]]></title>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/atom.xml" rel="self"/>
  <link href="http://kenjiskywalker.github.com/kenjiskywalker/"/>
  <updated>2014-12-07T05:57:57+09:00</updated>
  <id>http://kenjiskywalker.github.com/kenjiskywalker/</id>
  <author>
    <name><![CDATA[kenjiskywalker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014/11読んだ本]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/07/201411-book/"/>
    <updated>2014-12-07T05:21:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/07/201411-book</id>
    <content type="html"><![CDATA[<p>なんかもうちょっと読んでた気がするけどな&#8230;</p>

<div style="margin-bottom:15px;"><a href="http://booklog.jp/users/kenjiskywalker" target="_blank">kenjiskywalkerの本棚</a> - 2014年11月 (1作品)</div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00OZY4G6G" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51mueCl2g9L._SL75_.jpg" width="58" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00OZY4G6G" target="_blank">& Premium (アンド プレミアム) 2015年 1月号</a><br />読了日：11月24日<br /></div><br style="clear:both;" /></div>


<div style="margin:10px 0;font-size:80%;">powered by <a href="http://booklog.jp" target="_blank">booklog</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺の子連れおすすめスポット - 新宿御苑]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/07/jyoen/"/>
    <updated>2014-12-07T01:49:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/07/jyoen</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/681">俺の子連れおすすめスポット Advent Calendar 2014</a></p>

<p><a href="http://www.env.go.jp/garden/shinjukugyoen/">http://www.env.go.jp/garden/shinjukugyoen/</a></p>

<p>新宿御苑をおすすめします。</p>

<ul>
<li>大人（15歳以上）200円　小・中学生50円　幼児無料で安い</li>
<li>新宿駅から歩いていける</li>
<li>無茶苦茶土地が広い</li>
<li>少しオフロードだけどベビーカーでも道が広くてそこそこ整備してあるので余裕で動ける</li>
<li>お弁当持って芝生に寝っ転がって空眺めたりできるので最高</li>
<li>比較的空いているので代々木公園みたいな渋滞は起きない</li>
<li>ペットやお酒、ラジコンや遊び道具の持ち込みが禁止なので平和</li>
</ul>


<p>ということで新宿御苑、お散歩やピクニックにおすすめです。</p>

<blockquote><p>駐車場もあるんですね。初めて知った</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[capistrano3を利用してRails4をdeployしunicornを使う]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/02/capistrano3-rails4-unicorn/"/>
    <updated>2014-12-02T23:30:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/12/02/capistrano3-rails4-unicorn</id>
    <content type="html"><![CDATA[<blockquote><p>Rails v4.1.2<br/>
capistrano v3.3.3</p></blockquote>

<h2>TL;DR</h2>

<p>cap3でrails4のデプロイとbundle install<br/>
unicornの操作をできるようにするまでのメモ</p>

<h3>手元のマシンでcap3をインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install capistrano</span></pre></td></tr></table></div></figure>


<p>Railsアプリケーションのあるパスに移動</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ cd app_name</span></pre></td></tr></table></div></figure>


<h3>cap install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ cap install
</span><span class='line'>mkdir -p config/deploy
</span><span class='line'>create config/deploy.rb
</span><span class='line'>create config/deploy/staging.rb
</span><span class='line'>create config/deploy/production.rb
</span><span class='line'>mkdir -p lib/capistrano/tasks
</span><span class='line'>create Capfile
</span><span class='line'>Capified
</span><span class='line'>$ </span></pre></td></tr></table></div></figure>


<p><code>app_name/config</code>配下にdeploy用の各種設定テンプレートが格納され、<br/>
独自rake taskを格納する<code>app_name/lib/capistrano/tasks/</code>ディレクトリが作成され、<br/>
capistrano用の設定ファイル?であるCapfileのひな形が作成される.</p>

<h2>deployの設定</h2>

<h4>config/deploy.rb</h4>

<p>汎用的な設定はここに書くのかな</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>lock '3.3.3'
</span><span class='line'>
</span><span class='line'># 自分のアプリケーション名
</span><span class='line'>set :application, 'app_name'
</span><span class='line'>
</span><span class='line'># 自分のリポジトリ名.capistranoはrsyncではなくgit pullする
</span><span class='line'>set :repo_url, 'git@github.com:kenjiskywalker/app_name.git'
</span><span class='line'>
</span><span class='line'># デプロイ先
</span><span class='line'>set :deploy_to, '/home/foo/app_name'
</span><span class='line'>
</span><span class='line'># cap stage unicorn:start などの実行対象の role . デフォルトは app
</span><span class='line'>set :unicorn_roles, :all
</span><span class='line'>
</span><span class='line'>set :ssh_options, {
</span><span class='line'>
</span><span class='line'># ここのオプションは ssh_config に記載されていれば不要
</span><span class='line'># port: 2222,
</span><span class='line'># keys: [File.expand_path('~/.ssh/classi-san')],
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># ここは cap install するとコメントアウトで入るのでそのコメントアウトを解除
</span><span class='line'>set :linked_dirs, fetch(:linked_dirs, []).push('bin', 'log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')</span></pre></td></tr></table></div></figure>


<h3>config/deploy/stage.rb</h3>

<p>汎用的な設定はdeploy.rbに書き、stage毎の設定はstage.rbに書くのかな</p>

<ul>
<li>config/deploy/development.rb</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># RAILS_ENV の指定
</span><span class='line'>set :rails_env, 'development'
</span><span class='line'>
</span><span class='line'># unicorn で利用する RACK_ENV の指定
</span><span class='line'>set :unicorn_rack_env, 'development'
</span><span class='line'>
</span><span class='line'># ここの user も ssh_config に記載されていれば不要
</span><span class='line'>server 'dev-web1', user: 'foo', roles: %w{web}</span></pre></td></tr></table></div></figure>


<ul>
<li>config/deploy/staging.rb</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># RAILS_ENV の指定
</span><span class='line'>set :rails_env, 'staging'
</span><span class='line'>
</span><span class='line'># unicorn で利用する RACK_ENV の指定
</span><span class='line'>set :unicorn_rack_env, 'staging'
</span><span class='line'>
</span><span class='line'># ここの user も ssh_config に記載されていれば不要
</span><span class='line'>server 'stg-web1', user: 'foo', roles: %w{web}</span></pre></td></tr></table></div></figure>


<ul>
<li>config/deploy/production.rb</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># RAILS_ENV の指定
</span><span class='line'>set :rails_env, 'production'
</span><span class='line'>
</span><span class='line'># unicorn で利用する RACK_ENV の指定
</span><span class='line'>set :unicorn_rack_env, 'production'
</span><span class='line'>
</span><span class='line'># ここの user も ssh_config に記載されていれば不要
</span><span class='line'>server 'web1', user: 'foo', roles: %w{web}</span></pre></td></tr></table></div></figure>


<h3>Gemfile</h3>

<p>capistranoで利用するgemを追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>group :development, :staging, :production do
</span><span class='line'>  gem 'capistrano'
</span><span class='line'>  gem 'capistrano-rails'
</span><span class='line'>  gem 'capistrano-rbenv'
</span><span class='line'>  gem 'capistrano-bundler'
</span><span class='line'>  gem 'capistrano3-unicorn'
</span><span class='line'>  gem 'unicorn'
</span><span class='line'>end</span></pre></td></tr></table></div></figure>


<h3>Capfile</h3>

<p>consoleとbundlerとunicornを有効化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># Load DSL and Setup Up Stages
</span><span class='line'>require 'capistrano/setup'
</span><span class='line'>
</span><span class='line'># Includes default deployment tasks
</span><span class='line'>require 'capistrano/deploy'
</span><span class='line'>require 'capistrano/console' # cap stage console とかやると便利
</span><span class='line'>
</span><span class='line'># Includes tasks from other gems included in your Gemfile
</span><span class='line'>#
</span><span class='line'># For documentation on these, see for example:
</span><span class='line'>#
</span><span class='line'>#   https://github.com/capistrano/rvm
</span><span class='line'>#   https://github.com/capistrano/rbenv
</span><span class='line'>#   https://github.com/capistrano/chruby
</span><span class='line'>#   https://github.com/capistrano/bundler
</span><span class='line'>#   https://github.com/capistrano/rails
</span><span class='line'>#
</span><span class='line'># require 'capistrano/rvm'
</span><span class='line'># require 'capistrano/rbenv'
</span><span class='line'># require 'capistrano/chruby'
</span><span class='line'>require 'capistrano/bundler' # deploy:updated の前に bundle install してくれる
</span><span class='line'>require 'capistrano3/unicorn' # cap3で unicorn を操作できるようにしてくれる
</span><span class='line'># require 'capistrano/rails/assets'
</span><span class='line'># require 'capistrano/rails/migrations'
</span><span class='line'>
</span><span class='line'># Loads custom tasks from `lib/capistrano/tasks' if you have any defined.
</span><span class='line'>Dir.glob('lib/capistrano/tasks/*.rake').each { |r| import r }</span></pre></td></tr></table></div></figure>


<h3>config/unicorn/stage.rb</h3>

<p><a href="https://github.com/tablexi/capistrano3-unicorn/blob/master/lib/capistrano3/tasks/unicorn.rake#L4">:unicorn_config_path</a> を参考にすると<br/>
<code>config/unicorn.rb</code>ではなく<code>config/unicorn/satge.rb</code>を記載する</p>

<p>unicorn 設定例 : <a href="https://github.com/tablexi/capistrano3-unicorn/blob/master/examples/unicorn.rb">example.rb</a></p>

<p>上記設定例を参考に設定.取り敢えず変更箇所は<code>app_path</code>ぐらい</p>

<ul>
<li>config/unicorn/stage.rb</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># paths
</span><span class='line'>app_path = "/home/foo/app_name"
</span><span class='line'>working_directory "#{app_path}/current"
</span><span class='line'>pid               "#{app_path}/current/tmp/pids/unicorn.pid"
</span><span class='line'>
</span><span class='line'># listen
</span><span class='line'>listen "/tmp/class-api.socket", :backlog =&gt; 64
</span><span class='line'>
</span><span class='line'># logging
</span><span class='line'>stderr_path "log/unicorn.stderr.log"
</span><span class='line'>stdout_path "log/unicorn.stdout.log"
</span><span class='line'>
</span><span class='line'># workers
</span><span class='line'>worker_processes 3
</span><span class='line'>
</span><span class='line'># use correct Gemfile on restarts
</span><span class='line'>before_exec do |server|
</span><span class='line'>  ENV['BUNDLE_GEMFILE'] = "#{app_path}/current/Gemfile"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># preload
</span><span class='line'>preload_app true
</span><span class='line'>
</span><span class='line'>before_fork do |server, worker|
</span><span class='line'>  # the following is highly recomended for Rails + "preload_app true"
</span><span class='line'>  # as there's no need for the master process to hold a connection
</span><span class='line'>  if defined?(ActiveRecord::Base)
</span><span class='line'>    ActiveRecord::Base.connection.disconnect!
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # Before forking, kill the master process that belongs to the .oldbin PID.
</span><span class='line'>  # This enables 0 downtime deploys.
</span><span class='line'>  old_pid = "#{server.config[:pid]}.oldbin"
</span><span class='line'>  if File.exists?(old_pid) && server.pid != old_pid
</span><span class='line'>    begin
</span><span class='line'>      Process.kill("QUIT", File.read(old_pid).to_i)
</span><span class='line'>    rescue Errno::ENOENT, Errno::ESRCH
</span><span class='line'>      # someone else did our job for us
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>after_fork do |server, worker|
</span><span class='line'>  if defined?(ActiveRecord::Base)
</span><span class='line'>    ActiveRecord::Base.establish_connection
</span><span class='line'>  end
</span><span class='line'>end</span></pre></td></tr></table></div></figure>


<h2>動作チェック</h2>

<h3>deploy</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec cap development deploy:check
</span><span class='line'>$ bundle exec cap development deploy
</span><span class='line'>$ bundle exec cap staging deploy
</span><span class='line'>$ bundle exec cap production deploy</span></pre></td></tr></table></div></figure>


<h3>unicorn</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec cap development unicorn:start
</span><span class='line'>$ bundle exec cap development unicorn:legacy_restart
</span><span class='line'>$ bundle exec cap development unicorn:stop</span></pre></td></tr></table></div></figure>


<h3>学び</h3>

<p>rsyncではなくgit pullなので混乱することがある.<br/>
currentやrelease, sharedなど見たらわかる面白構造.<br/>
当たり前だけど上手くいかない時は手を動かすよりドキュメントとコードを読んだ方が早い.</p>

<p>以上簡単なメモです.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible Vaultで暗号化されたファイルをCircleCIで利用する]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/17/ansible-vault-circleci/"/>
    <updated>2014-11-17T14:08:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/17/ansible-vault-circleci</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>CircleCIのEnvironment variablesを利用して<br/>
ファイルにdecryptのパスワードを記入する</p>

<h2>設定</h2>

<ul>
<li><a href="https://circleci.com/docs/environment-variables">Environment variables - CircleCI</a></li>
<li><a href="http://docs.ansible.com/playbooks_vault.html">Vault - Ansible</a></li>
</ul>


<p>CircleCIの環境変数に値を設定する機能を利用し、<br/>
テスト実行前にその環境変数に設定したVault用の<br/>
パスワードをファイルに出力しておき、ansible実行時には<br/>
そのファイルを見に行くようにする。</p>

<ul>
<li>circle.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>machine:
</span><span class='line'>  services:
</span><span class='line'>    - docker
</span><span class='line'>
</span><span class='line'>dependencies:
</span><span class='line'>  pre:
</span><span class='line'>    - if [[ -e docker_ansible_image.tar ]]; then cat docker_ansible_image.tar | docker import - kenjiskywalker/dockerfile-centos-ansible ; docker load --input docker_ansible_image.tar ; else docker build . ; docker save -o docker_ansible_image.tar kenjiskywalker/dockerfile-centos-ansible ; fi
</span><span class='line'>    - echo "${ANSIBLE_VAULT}" &gt; $(pwd)/ansible/vault.txt
</span><span class='line'>
</span><span class='line'>  cache_directories:
</span><span class='line'>    - "docker_ansible_image.tar"
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  post:
</span><span class='line'>    - docker run -v $(pwd)/ansible:/ansible kenjiskywalker/dockerfile-centos-ansible ansible-playbook /ansible/ci.yml  --vault-password-file /ansible/vault.txt -i /ansible/inventory_localhost -c local</span></pre></td></tr></table></div></figure>


<p>他に良いプラクティスあれば教えてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CircleCIでDockerコンテナに対してansibleを実行しserverspecでテストをする]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/13/circleci-docker-ansible-serverspec/"/>
    <updated>2014-11-13T21:11:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/13/circleci-docker-ansible-serverspec</id>
    <content type="html"><![CDATA[<h3>参考</h3>

<p><a href="https://speakerdeck.com/naoya/kaizen-platform-inc-niokeruyun-yong-zi-dong-hua">KAIZEN platform Inc. における運用自動化 - Speaker Deck</a><br/>
<a href="https://circleci.com/docs/docker">Continous Integration and Delivery with Docker - CircleCI</a></p>

<h2>TL;DR</h2>

<p>CircleCI上でDockerコンテナを立て、<br/>
そのコンテナに対してプロビジョニングを行い、<br/>
プロビジョニング後のコンテナに対してテストを行う</p>

<h2>DockerコンテナにAnsibleを実行する</h2>

<p>コミットする度にDockerのimageをpullするのは時間がもったいないので<br/>
<code>cache_directories</code>を利用し、imageをexportしておき<br/>
実行時にimportするようにすると多少速くなる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Dockerfile
</span><span class='line'>├── ansible/
</span><span class='line'>└── circle.yml</span></pre></td></tr></table></div></figure>


<ul>
<li>Dockerfile</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>FROM kenjiskywalker/dockerfile-centos-ansible</span></pre></td></tr></table></div></figure>


<ul>
<li>circle.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>machine:
</span><span class='line'>  services:
</span><span class='line'>    - docker
</span><span class='line'>
</span><span class='line'>dependencies:
</span><span class='line'>  pre:
</span><span class='line'>    - if [[ -e docker_ansible_image.tar ]]; then cat docker_ansible_image.tar | docker import - kenjiskywalker/dockerfile-centos-ansible ; docker load --input docker_ansible_image.tar ; else docker build . ; docker save -o docker_ansible_image.tar kenjiskywalker/dockerfile-centos-ansible ; fi
</span><span class='line'>
</span><span class='line'>  cache_directories:
</span><span class='line'>    - "docker_ansible_image.tar"
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  post:
</span><span class='line'>    - docker run -v `pwd`/ansible:/ansible kenjiskywalker/dockerfile-centos-ansible ansible-playbook /ansible/ci.yml -i /ansible/inventory_localhost -c local</span></pre></td></tr></table></div></figure>


<p>こんな感じの設定ファイルを置いておくと<code>ansible</code>ディレクトリをマウントし<br/>
Dockerコンテナがansibleを実行できる状態であればDockerコンテナに対して<br/>
ansibleが実行できる。この続きにServerspecを記述することで</p>

<ol>
<li>リポジトリにansibleのファイルをコミットする</li>
<li>CircleCI上にてDockerコンテナを起動</li>
<li>Dockerコンテナに対してansibleでプロビジョニング</li>
<li>そのプロビジョニング結果をServerspecでテストをする</li>
</ol>


<p>のようなことができる。</p>

<h2>wercker</h2>

<p>werckerでも同じようなことができる。<br/>
CircleCIと同様にファイルをキャッシュするには<br/>
<code>$WERCKER_CACHE_DIR</code>を利用すればよいかと。</p>

<ul>
<li>wercker.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>box: wercker-labs/docker
</span><span class='line'>build:
</span><span class='line'>  steps:
</span><span class='line'>    - script:
</span><span class='line'>        name: docker build
</span><span class='line'>        code: docker build .
</span><span class='line'>    - script:
</span><span class='line'>        name: docker run
</span><span class='line'>        code: docker run -v `pwd`/ansible:/ansible dockerfile/ansible ansible-playbook /ansible/ci.yml -i /ansible/inventory_localhost -c local</span></pre></td></tr></table></div></figure>


<p>以上、メモです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトで外部コマンドを利用する場合の注意点]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/10/shellscript-old-style/"/>
    <updated>2014-11-10T15:37:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/10/shellscript-old-style</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>シェルスクリプトでbackquoteを見つけたら<br/>
オールドスタイルおじさんを探し、矯正させよう</p>

<blockquote><p>GNU Bash-2.05 manual</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>   When the old-style backquote form of substitution is used, backslash retains its  lit-  
</span><span class='line'>   eral  meaning except when followed by $, `, or \.  The first backquote not preceded by  
</span><span class='line'>   a backslash terminates the command substitution.  When using the $(command) form,  all  
</span><span class='line'>   characters between the parentheses make up the command; none are treated specially.</span></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">a</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s1">&#39;\&#39;`</span>
</span><span class='line'><span class="s1">echo ${a} # \</span>
</span><span class='line'>
</span><span class='line'><span class="s1">b=`echo &quot;\\&quot;`</span>
</span><span class='line'><span class="s1">echo ${b} # unexpected EOF while looking for matching `&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">c</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="err">&#39;</span><span class="se">\&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">c</span><span class="k">}</span> <span class="c"># \</span>
</span><span class='line'>
</span><span class='line'><span class="nv">d</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="s2">&quot;\\&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">d</span><span class="k">}</span> <span class="c"># \</span>
</span></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://hyperpolyglot.org/unix-shells#cmd-subst-note">http://hyperpolyglot.org/unix-shells#cmd-subst-note</a></p>

<h2>追記</h2>

<blockquote class="twitter-tweet" lang="en"><p>csh系では動かないのでは？というご意見を頂いておりますが、csh系を利用されている方は基本的に強い意思を持って取り組まれているかと存じますので、わざわざ説明することはないと判断しております</p>&mdash; kenjiskywalker (@kenjiskywalker) <a href="https://twitter.com/kenjiskywalker/status/531709951777857536">November 10, 2014</a></blockquote>


<script async src="http://kenjiskywalker.github.com/kenjiskywalker//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014/10読んだ本]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/02/201410-book/"/>
    <updated>2014-11-02T01:59:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/11/02/201410-book</id>
    <content type="html"><![CDATA[<p>太平記、いよいよ尊氏がのし上がってきた。</p>

<div style="margin-bottom:15px;"><a href="http://booklog.jp/users/kenjiskywalker" target="_blank">kenjiskywalkerの本棚</a> - 2014年10月 (7作品)</div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4061592998" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41Z7F36DYDL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4061592998" target="_blank">本を読む本 (講談社学術文庫)</a><br /><a href="http://booklog.jp/author/J%E3%83%BB%E3%83%A2%E3%83%BC%E3%83%86%E3%82%A3%E3%83%9E%E3%83%BC%E3%83%BB%E3%82%A2%E3%83%89%E3%83%A9%E3%83%BC" target="_blank">J・モーティマー・アドラー</a><br />読了日：10月10日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00G3QYKEM" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51bjX8kwqEL._SL75_.jpg" width="50" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00G3QYKEM" target="_blank">私本太平記 07 千早帖</a><br /><a href="http://booklog.jp/author/%E5%90%89%E5%B7%9D%E8%8B%B1%E6%B2%BB" target="_blank">吉川英治</a><br />読了日：10月10日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4063883817" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61roFPa3QIL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4063883817" target="_blank">GIANT KILLING(33) (モーニング KC)</a><br /><a href="http://booklog.jp/author/%E3%83%84%E3%82%B8%E3%83%88%E3%83%A2" target="_blank">ツジトモ</a><br />読了日：10月26日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00G3R04NC" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51kD3wswI8L._SL75_.jpg" width="50" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00G3R04NC" target="_blank">私本太平記 08 新田帖</a><br /><a href="http://booklog.jp/author/%E5%90%89%E5%B7%9D%E8%8B%B1%E6%B2%BB" target="_blank">吉川英治</a><br />読了日：10月26日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00G3R1M2E" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51QdHojEjuL._SL75_.jpg" width="50" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00G3R1M2E" target="_blank">私本太平記 09 建武らくがき帖</a><br /><a href="http://booklog.jp/author/%E5%90%89%E5%B7%9D%E8%8B%B1%E6%B2%BB" target="_blank">吉川英治</a><br />読了日：10月26日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4774167681" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61FyzLfkvnL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4774167681" target="_blank">サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)</a><br /><a href="http://booklog.jp/author/%E4%BC%8A%E8%97%A4%E7%9B%B4%E4%B9%9F" target="_blank">伊藤直也</a><br />読了日：10月26日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00NFW7RCY" target="_blank"><img src="http://ecx.images-amazon.com/images/I/619ts5KepqL._SL75_.jpg" width="52" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00NFW7RCY" target="_blank">高校サッカーダイジェスト Vol.7 2014年 11/1号 [雑誌]</a><br />読了日：10月27日<br /></div><br style="clear:both;" /></div>


<div style="margin:10px 0;font-size:80%;">powered by <a href="http://booklog.jp" target="_blank">booklog</a></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「サーバ/インフラ徹底攻略」を読んだ]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/26/server-infra-webdb-book/"/>
    <updated>2014-10-26T18:05:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/26/server-infra-webdb-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/%E3%82%B5%E3%83%BC%E3%83%90-%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5-WEB-PRESS-plus/dp/4774167681%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3D13nightcrows-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774167681" target="_blank" title="サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)"><img src="http://ecx.images-amazon.com/images/I/61FyzLfkvnL.jpg" width="354" height="500" alt="サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)" /></a></p>

<p><a href="http://www.amazon.co.jp/%E3%82%B5%E3%83%BC%E3%83%90-%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5-WEB-PRESS-plus/dp/4774167681%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3D13nightcrows-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774167681" target="_blank">サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)</a></p>

<p>ご恵贈ありがとうございます！</p>

<h2>TL;DR</h2>

<p>mizzyさんのServerspecを利用したインフラCIの章、<br/>
サイバーエージェント社のメンテナンスの章は最高だった</p>

<h2>もくじ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>巻頭企画
</span><span class='line'>［入門］コードによるインフラ構築
</span><span class='line'>サーバ構成管理の自動化を実現する
</span><span class='line'>
</span><span class='line'>第1章：ChefとVagrantによるインフラのコード化
</span><span class='line'>設定の一元管理で作業を省力化する……伊藤 直也
</span><span class='line'>第2章：Serverspecによるテスト駆動インフラ構築
</span><span class='line'>設定変更の反映を確実なものにする……伊藤 直也
</span><span class='line'>特集1
</span><span class='line'>Amazon Web Services最新活用
</span><span class='line'>レイヤ別比較，構築の定石，構成管理の自動化
</span><span class='line'>
</span><span class='line'>第1章：Amazon Web Servicesレイヤ別比較
</span><span class='line'>各サービスの特徴を理解し，うまく使い分ける……片山 暁雄，平山 毅
</span><span class='line'>第2章：EC2とVPCによるシステム構築
</span><span class='line'>セキュアで可用性を高めたインフラの作り方……舟崎 健治，吉荒 祐一
</span><span class='line'>第3章：RDSによるデータベースの活用
</span><span class='line'>作成，デプロイ，バックアップ……今井 雄太，八木橋 徹平
</span><span class='line'>第4章：CloudFormationによる構築の自動化
</span><span class='line'>テンプレートの作成からミドルウェア構築設定まで……安川 健太
</span><span class='line'>特集2
</span><span class='line'>テスト駆動インフラ＆CI最前線
</span><span class='line'>Infrastructure as Codeがもたらすワークフローの刷新
</span><span class='line'>
</span><span class='line'>第1章：インフラのテストとその重要性
</span><span class='line'>「インフラのコード化」による開発手法の応用……宮下 剛輔
</span><span class='line'>第2章：テスト駆動インフラの実践
</span><span class='line'>VirtualBox，Vagrant，Puppet，Serverspecによるテスト自動化……宮下 剛輔
</span><span class='line'>第3章：インフラCIの実践
</span><span class='line'>GitHub，Wercker，DigitalOceanによる継続的テスト……宮下 剛輔
</span><span class='line'>第4章：インフラの継続的改善の実践
</span><span class='line'>GitHub Flowをベースとしたワークフロー変革……宮下 剛輔
</span><span class='line'>特集3
</span><span class='line'>実践Immutable Infrastructure
</span><span class='line'>使い捨てサーバによる運用の変革
</span><span class='line'>
</span><span class='line'>第1章：Immutable Infrastructureとは何か
</span><span class='line'>不変なサーバ，Blue-green Deploymentとそれらの利点……田中 慎司
</span><span class='line'>第2章：Immutable Infrastructureで利用するツール／サービス
</span><span class='line'>比較・整理と，システム全体での組み合わせ……田中 慎司
</span><span class='line'>第3章：コンテナ型仮想化とクラウドによる実践
</span><span class='line'>Docker+HAProxy，Amazon EC2+ELB……田中 慎司
</span><span class='line'>第4章：クラスタ管理ツールによる実践
</span><span class='line'>Apache Mesosでリソース管理の自動化……田中 慎司
</span><span class='line'>特集4
</span><span class='line'>［詳解］nginx
</span><span class='line'>設定の柔軟性と優れたスケーラビリティ
</span><span class='line'>
</span><span class='line'>第1章：nginxの世界へようこそ
</span><span class='line'>アーキテクチャ，用途，メリット，デメリット……久保 達彦
</span><span class='line'>第2章：はじめてのnginx
</span><span class='line'>インストール，起動と終了，基本設定……道井 俊介
</span><span class='line'>第3章：一般的なWebサーバの構築
</span><span class='line'>バーチャルホスト，アクセス制御，SSL通信，基本認証……飯田 祐基
</span><span class='line'>第4章：実践的なWebアプリケーションサーバの構築
</span><span class='line'>Unicorn/RailsやPHP-FPMと連携させる……道井 俊介
</span><span class='line'>第5章：大規模コンテンツ配信システムの構築
</span><span class='line'>キャッシュ，ロードバランシングを活用する……飯田 祐基
</span><span class='line'>第6章：拡張モジュールのしくみと作り方
</span><span class='line'>nginxを自由にカスタマイズするための基礎知識……久保 達彦
</span><span class='line'>特集5
</span><span class='line'>メンテナンス本格入門
</span><span class='line'>緊急対応，計画停止，メンテフリー化
</span><span class='line'>
</span><span class='line'>第1章：メンテナンスとは
</span><span class='line'>種類と手法を整理する……桑野 章弘
</span><span class='line'>第2章：計画メンテナンスの流れ
</span><span class='line'>事前準備，作業のチェック，振り返り……松浦 隼人
</span><span class='line'>第3章：緊急メンテナンスの流れ
</span><span class='line'>普段から備えるべきこと，障害時の対応……松浦 隼人
</span><span class='line'>第4章：メンテフリーへのアプローチ【インフラ編】
</span><span class='line'>省力運用を実現するインフラ，データベース設計と障害検知……松浦 隼人，中村 俊之
</span><span class='line'>第5章：メンテフリーへのアプローチ【アプリケーション編】
</span><span class='line'>ダウンタイムを減らすリリース手法とアプリケーション設計……福永 亘，中村 俊之，松浦 隼人
</span><span class='line'>第6章：ガールフレンド（仮）とアメーバピグの事例
</span><span class='line'>現場でどう実践し，どう障害を切り抜けたか……福永 亘，杉山 仁則
</span><span class='line'>一般記事
</span><span class='line'>
</span><span class='line'>Dockerで軽量な仮想環境
</span><span class='line'>Linuxコンテナでインフラを瞬時に構築する……伊藤 直也</span></pre></td></tr></table></div></figure>


<h2>感想</h2>

<h3>なおやさんの章</h3>

<p>Vagrant、Chef、Serverspecなどを利用したことのない人が<br/>
手元でひと通り読みながら進めるとインフラのコード化を実感できる.</p>

<h3>AWSさんの章</h3>

<p>Amazon Web Servicesの章はひと通りのサービスの説明と<br/>
実際にアプリケーションを動かす例が記載されている.<br/>
これを読めばいきなりAWSを駆使できるかと言われればNoだが<br/>
AWS全体のサービスを把握するのに良さそう.</p>

<h3>mizzyさんの章</h3>

<p>mizzyさんの章はServerspecの作者であるmizzyさんご自身の<br/>
Serverspecの活用方法で、実際に<a href="https://www.digitalocean.com/">DigitalOcean</a>と<a href="http://wercker.com/">wercker</a>を利用して<br/>
手を動かしながら、インフラのCIを体験することができる.<br/>
利用しているサービスも、DigitalOceanは一般的なインスタンスでも<br/>
1時間に1.6円(2014/10現在)で利用でき、<br/>
werckerはまだ無料の(2014/10現在)CIサービスなのでとても簡単に始めることができる.</p>

<p>導入だけでなく<a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow</a>を利用してどのように運用するかまで載っているので<br/>
インフラのCIインフラのCIって最近よく聞くけどどうやったらいいんだ.<br/>
という私と同じようなエンジニアにとっては大変ありがたい章だ.<br/>
全体のデザインのモチーフが宇宙観があって最高だった.</p>

<h3>stanakaさんの章</h3>

<p>先ほどのmizzyさんの章のモチーフが宇宙だったのに比べ、stanakaさんの章は神社だ.<br/>
Immutable Infrastructureをどのように実践するかの具体的な内容が記載されている.<br/>
はてな社はこの環境でプロダクトのサービスが動いているのだろうか.すごい.</p>

<h3>nginxの章</h3>

<p>nginxについて色々な内容が書いてあった.<br/>
本書の全体の構成の中で、nginxだけを扱うというスコープが<br/>
他の章と比べると少し変な感じがした.</p>

<h3>メンテナンスの章</h3>

<p>サイバーエージェント社の存在するサービスに対して<br/>
どのようにメンテナンス作業を行っているのかという社外に出てこないような知見を<br/>
このように書籍として読めるのは本当に貴重だと思う.</p>

<p>ウェブサービス業界のサーバサイドの勉強会はかなり多く開催されているが、<br/>
このような泥臭いというか、目新しくはないけど<br/>
確実に行わなければならない企業毎の知見みたいなものを共有していく重要性を<br/>
改めて考えさせられた章だった.ありがたい</p>

<h3>Dockerの章</h3>

<p>Vagrant + Dockerの基本的な内容が記載されている.<br/>
とりあえずどんなものか知るのに良さそう.</p>

<h2>まとめ</h2>

<p>職人がサーバひとつひとつ温もりを持って構築している職場を改善したい人や、<br/>
大企業でメンテナンス作業がどう行われているのか知りたいエンジニア、<br/>
インフラのコード化、インフラのCI、AWSなどざざっと把握してみたい人には良いと思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS Xでfigを利用してDockerのコンテナを操作する]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/25/osx-fig-docker-access-container/"/>
    <updated>2014-10-25T21:38:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/25/osx-fig-docker-access-container</id>
    <content type="html"><![CDATA[<blockquote><p>Docker v1.3<br/>
fig 1.0.0</p></blockquote>

<h2>TL;DR</h2>

<p>OS XでDockerコンテナを操作するのが手間だったけどfigを使えば解決した.<br/>
OS Xで本番環境と同じような環境をつくりたくてboot2docker + figを利用した</p>

<h2>目を通しておいてもらいたい最高のエントリー</h2>

<p><a href="http://qiita.com/toritori0318/items/190fd2dad2bf3ce38b88">Docker1.3版 boot2docker+fig入門 - Qiita</a><br/>
<a href="http://deeeet.com/writing/2014/10/08/boot2docker-guest-additions/">boot2dockerでのVolume問題が解決しそう | SOTA</a></p>

<h2>必要なもの</h2>

<ul>
<li><a href="http://boot2docker.io/">boot2docker</a></li>
<li><a href="http://www.fig.sh/">fig</a></li>
</ul>


<h2>fig</h2>

<p>OS Xでは、Docker containerにアクセスするまでに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>OS X -&gt; boot2docker -&gt; docker container</span></pre></td></tr></table></div></figure>


<p></p>

<p>boot2dockerを一旦挟まなければならなかった.<br/>
これをfigを利用することで、透過的に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>OS X -&gt; docker container</span></pre></td></tr></table></div></figure>


<p></p>

<p>このようにアクセスしているかのようにラッピングができる</p>

<h2>update 2014/10/27</h2>

<p>完全に勘違い！OS Xでも普通に<code>docker</code>コマンド使えます.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ boot2docker up
</span><span class='line'>$ boot2docker ssh
</span><span class='line'>$ docker build .</span></pre></td></tr></table></div></figure>


<p>などと操作しなくても<a href="https://github.com/docker/docker/blob/master/CHANGELOG.md#073-2014-01-02">0.7.3</a>の頃から<br/>
DockerはOS Xに対応していて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ boot2docker up
</span><span class='line'>$ docker build .</span></pre></td></tr></table></div></figure>


<p>のようにログインせずともTiny Core Linuxのリモートクライアントとして<br/>
コマンドを発行できた.全然アップデート見てないことがバレた〜</p>

<p>Thanks <a href="http://deeeet.com/writing/2014/10/08/boot2docker-guest-additions/">@deeeet</a>!!!</p>

<h3>figとは</h3>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/deeeet">@deeeet</a> <a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> fig、foremanとかprocletに近い用途なイメージあります</p>&mdash; ゆううき (@y_uuk1) <a href="https://twitter.com/y_uuk1/status/526631144335233025">October 27, 2014</a></blockquote>


<script async src="http://kenjiskywalker.github.com/kenjiskywalker//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのことです.わかりやすい.</p>

<h3>figを利用しない場合</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ boot2docker up
</span><span class='line'>$ docker build .
</span><span class='line'>$ docker run -p 3000:3000 8c6d6a1339b6 bundle exec rackup -p 3000</span></pre></td></tr></table></div></figure>


<p>のような操作で起動できる.</p>

<h2>figをどのように使うか</h2>

<p>とあるRailsのアプリケーションがあった時に、そのアプリケーションを<br/>
Docker containerで透過的に操作する為にどのようなことが必要なのかの例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── README.rdoc
</span><span class='line'>├── Rakefile
</span><span class='line'>├── app
</span><span class='line'>├── bin
</span><span class='line'>├── build
</span><span class='line'>├── config
</span><span class='line'>├── config.ru
</span><span class='line'>├── db
</span><span class='line'>├── lib
</span><span class='line'>├── log
</span><span class='line'>├── myapp
</span><span class='line'>├── public
</span><span class='line'>├── test
</span><span class='line'>├── tmp
</span><span class='line'>└── vendor</span></pre></td></tr></table></div></figure>


<p>このようにRailsアプリケーションのディレクトリに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Dockerfile
</span><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── README.rdoc
</span><span class='line'>├── Rakefile
</span><span class='line'>├── app
</span><span class='line'>├── bin
</span><span class='line'>├── build
</span><span class='line'>├── config
</span><span class='line'>├── config.ru
</span><span class='line'>├── db
</span><span class='line'>├── fig.yml
</span><span class='line'>├── lib
</span><span class='line'>├── log
</span><span class='line'>├── myapp
</span><span class='line'>├── public
</span><span class='line'>├── test
</span><span class='line'>├── tmp
</span><span class='line'>└── vendor</span></pre></td></tr></table></div></figure>


<p><code>Dockerfile</code>と<code>fig.yml</code>を置く</p>

<ul>
<li>Dockerfile</li>
</ul>


<p>日本に住む人々は魂をRedHatに引かれてUbuntuを利用しにくいので<br/>
CentOS 6.5でRuby 2.1.3が使えるコンテナを用意した(名前の通りsqliteも入っている)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>FROM kenjiskywalker/dockerfile-centos-ruby-sqlite:ruby213
</span><span class='line'>
</span><span class='line'>WORKDIR /tmp
</span><span class='line'>ADD Gemfile Gemfile
</span><span class='line'>ADD Gemfile.lock Gemfile.lock
</span><span class='line'>RUN bundle install
</span><span class='line'>
</span><span class='line'>RUN mkdir /myapp
</span><span class='line'>WORKDIR /myapp
</span><span class='line'>ADD . /myapp</span></pre></td></tr></table></div></figure>


<ul>
<li>fig.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>web:
</span><span class='line'>  build: .
</span><span class='line'>  command: bundle exec rackup -p 3000
</span><span class='line'>  volumes:
</span><span class='line'>    - .:/myapp
</span><span class='line'>  ports:
</span><span class='line'>    - "3000:3000"</span></pre></td></tr></table></div></figure>


<p>この状態で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ boot2docker up
</span><span class='line'>$ fig up</span></pre></td></tr></table></div></figure>


<p>とコマンドを発行し</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ boot2docker ip
</span><span class='line'>
</span><span class='line'>The VM's Host only interface IP address is: 192.168.59.103
</span><span class='line'>
</span><span class='line'>$</span></pre></td></tr></table></div></figure>


<p>で利用しているIPアドレスを確認して</p>

<p><code>http://192.168.59.103:3000/</code>にアクセスすると<br/>
コンテナ上で起動しているアプリケーションにアクセスすることができる.</p>

<h2>手元のデータベース・サーバで何を選択するか</h2>

<p>development環境がsqlite3を利用する設定であれば<br/>
データベースのミドルウェアを立ち上げる必要はないので<br/>
1コンテナで完結するのでこの方法が利用できます.</p>

<ul>
<li>config/database.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>development: &default
</span><span class='line'>  adapter: sqlite3
</span><span class='line'>  database: db/development.sqlite3
</span><span class='line'>  pool: 5
</span><span class='line'>  timeout: 5000</span></pre></td></tr></table></div></figure>


<p>しかし、裏側にMySQLを利用する場合は</p>

<ul>
<li>fig.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>db:
</span><span class='line'>  image: mysql
</span><span class='line'>  environment:
</span><span class='line'>    MYSQL_ROOT_PASSWORD: "pass"
</span><span class='line'>  ports:
</span><span class='line'>    - "3306"
</span><span class='line'>
</span><span class='line'>web:
</span><span class='line'>  build: .
</span><span class='line'>  command: bundle exec rackup -p 3000
</span><span class='line'>  volumes:
</span><span class='line'>    - .:/myapp
</span><span class='line'>  ports:
</span><span class='line'>    - "3000:3000"
</span><span class='line'>  links:
</span><span class='line'>    - db
</span><span class='line'>  environment:
</span><span class='line'>    DB_HOST: db</span></pre></td></tr></table></div></figure>


<ul>
<li>config/database.yml</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>development: &default
</span><span class='line'>  adapter: mysql2
</span><span class='line'>  encoding: utf8
</span><span class='line'>  pool: 5
</span><span class='line'>  database: mysql
</span><span class='line'>  username: root
</span><span class='line'>  password: 'pass'
</span><span class='line'>  host: &lt;%= ENV['DB_HOST'] %&gt;</span></pre></td></tr></table></div></figure>


<p>このようにデータベースサーバ用コンテナの設定をRails側に記載しなければならない.</p>

<p>アプリケーションもデータベースもsupervisorなどで動くコンテナを<br/>
作成すれば良いのではないか、という話になるが、<br/>
本番サーバも同じようにsupervisorを利用しているならまだしも<br/>
手元でのテストをするためだけに専用のコンテナを用意するのは<br/>
本質的ではない気がします.</p>

<blockquote><p>今書いていて、supervisorで色々上げるコンテナ用意するのは<br/>
それはそれでいいかもしれないという気がしてきた</p></blockquote>

<h2>まとめ</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/deeeet">@deeeet</a> <a href="https://twitter.com/kenjiskywalker">@kenjiskywalker</a> fig、foremanとかprocletに近い用途なイメージあります</p>&mdash; ゆううき (@y_uuk1) <a href="https://twitter.com/y_uuk1/status/526631144335233025">October 27, 2014</a></blockquote>


<script async src="http://kenjiskywalker.github.com/kenjiskywalker//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>です.</p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/toritori0318/items/190fd2dad2bf3ce38b88">Docker1.3版 boot2docker+fig入門 - Qiita</a> アルパカさんの最高のまとめ</li>
<li><a href="http://www.fig.sh/rails.html">Getting started with Fig and Rails - fig</a></li>
<li><a href="http://blog.docker.com/2014/10/fig-1-0-boot2docker-compatibility-and-more/">Fig 1.0: boot2docker compatibility and more | Docker Blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansibleを利用してRailsが動くVagrantfileを作成する]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/24/ansible-vagrant/"/>
    <updated>2014-10-24T05:56:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/24/ansible-vagrant</id>
    <content type="html"><![CDATA[<p><img src="http://cdn2.hubspot.net/hub/330046/file-769078190-png/Official_Logos/ansible_wordlogo_whiteonblack_small.png?t=1414090782106" alt="http://cdn2.hubspot.net/hub/330046/file-769078190-png/Official_Logos/ansible_wordlogo_whiteonblack_small.png?t=1414090782106" /></p>

<h2>TL;DR</h2>

<p>Ansibleを利用したからって複雑な処理がシンプルになるわけではない</p>

<h3>1st</h3>

<p>対象のサーバに何か設定をする必要はないので<br/>
このように少量のコードでやりたいことが実現できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']%
</span><span class='line'>['-']% cat hosts
</span><span class='line'>ansible.example.com
</span><span class='line'>['-']%
</span><span class='line'>['-']% ansible -m ping -i hosts ansible.example.com
</span><span class='line'>ansible.example.com | success &gt;&gt; {
</span><span class='line'>    "changed": false,
</span><span class='line'>    "ping": "pong"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>['-']%
</span><span class='line'>['-']% cat playbook.yml
</span><span class='line'>- hosts: all
</span><span class='line'>
</span><span class='line'>  tasks:
</span><span class='line'>  - name: Install dstat
</span><span class='line'>    yum: name=dstat
</span><span class='line'>['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']% ansible-playbook -i hosts playbook.yml
</span><span class='line'>
</span><span class='line'>PLAY [all] ********************************************************************
</span><span class='line'>
</span><span class='line'>GATHERING FACTS ***************************************************************
</span><span class='line'>ok: [ansible.example.com]
</span><span class='line'>
</span><span class='line'>TASK: [Install dstat] *********************************************************
</span><span class='line'>ok: [ansible.example.com]
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>ansible.example.com            : ok=2    changed=0    unreachable=0    failed=0
</span><span class='line'>
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>


<p>Inventoryファイル(上記でいうとhostsファイル)の動的更新<br/>
各社独自で工夫してるんだろうな&#8230;</p>

<h2>Role</h2>

<p>1.2から使える機能とのこと、詳しくは<br/>
<a href="http://docs.ansible.com/playbooks_roles.html">Playbook Roles and Include Statements</a>を読んでもらいたい.<br/>
Chefを利用している人は馴染みがあるというか<br/>
そういう構成なのか、とすんなりと理解できると思う.</p>

<p>Chefでいうcookbookの構成に近いというか<br/>
Chefを意識したつくりになっている気がする.<br/>
ある程度の規模になったらRoleを利用しないとつらいと思う.</p>

<h2>Railsの環境をAsibleで用意してみる</h2>

<p><a href="https://github.com/kenjiskywalker/ansible">https://github.com/kenjiskywalker/ansible</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']% tree .
</span><span class='line'>.
</span><span class='line'>├── dev.yml
</span><span class='line'>└── roles
</span><span class='line'>    ├── mysql
</span><span class='line'>    │   └── tasks
</span><span class='line'>    │       └── main.yml
</span><span class='line'>    ├── rails
</span><span class='line'>    │   └── tasks
</span><span class='line'>    │       └── main.yml
</span><span class='line'>    └── ruby
</span><span class='line'>        ├── files
</span><span class='line'>        ├── handlers
</span><span class='line'>        ├── tasks
</span><span class='line'>        │   ├── main.yml
</span><span class='line'>        │   ├── rbenv.yml
</span><span class='line'>        │   ├── ruby-build.yml
</span><span class='line'>        │   └── ruby-install.yml
</span><span class='line'>        └── templates
</span><span class='line'>            └── rbenv.sh.j2
</span><span class='line'>
</span><span class='line'>10 directories, 8 files</span></pre></td></tr></table></div></figure>


<h3>軽く書いてみて気がついたこと</h3>

<ul>
<li><code>command</code>がコマンドだけで<code>shell</code>がパイプも使えるとか気が付かなくてハマった</li>
<li><code>ohai</code>がいないので<code>apt</code>や<code>yum</code>など、ディストリビューションのパッケージ管理ツールを<code>package</code>みたいにラッピングしてくれない</li>
<li><code>register</code>の概念が面白かった</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>- name: check Rails installed
</span><span class='line'>  shell: rails -v | cut -f 2 -d ' '
</span><span class='line'>  register: rails_installed
</span><span class='line'>  ignore_errors: yes
</span><span class='line'>  tags:
</span><span class='line'>    - ruby
</span><span class='line'>    - ruby:install
</span><span class='line'>    - install
</span><span class='line'>
</span><span class='line'>- name: gem install rails -v 
</span><span class='line'>  command: gem install rails -v 
</span><span class='line'>  when: rails_installed.stdout != rails_version
</span><span class='line'>  tags:
</span><span class='line'>    - rails
</span><span class='line'>    - install</span></pre></td></tr></table></div></figure>


<p>のように書くと、<code>rails -v | cut -f 2 -d ' '</code>のコマンドの実行結果を<br/>
<code>rails_installed</code>という変数に格納し、その変数を利用して<br/>
条件分岐などを行うことができる.</p>

<h3>Vagrantfile</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>VAGRANTFILE_API_VERSION = "2"
</span><span class='line'>
</span><span class='line'>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
</span><span class='line'>  config.vm.box = "centos65"
</span><span class='line'>  config.vm.box_url = "https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box"
</span><span class='line'>  config.vm.define :"dev" do |dev|
</span><span class='line'>    dev.vm.network :private_network, ip: '192.168.77.11'
</span><span class='line'>  end
</span><span class='line'>  config.vm.provision "ansible" do |ansible|
</span><span class='line'>    ansible.playbook = "./ansible/dev.yml"
</span><span class='line'>  end
</span><span class='line'>end</span></pre></td></tr></table></div></figure>


<p>このようにVagrantのprovisonerにansibleを利用することが可能です。<br/>
READMEに書いてあるように、<code>vagrant up</code>を発行するとdev.ymlを利用した<br/>
ansibleが実行されます.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant provision</span></pre></td></tr></table></div></figure>


<p>とコマンドを発行することで、実行中のVagrantのインスタンスに対して<br/>
プロビジョニングすることが可能です。</p>

<h3>Chefの闇はAnsibleで光を得るのか</h3>

<ul>
<li>構成や管理方法が複雑であれば何を使ってもあまり変わらない</li>
<li>新しく覚える時間が許されるなら両方試してみれば良いのでは</li>
<li>上から下に実行されるだけ(ruby_blockとか使わなくていい)のは良い</li>
</ul>


<h3>個人的感想</h3>

<ul>
<li>Ansible縛りでなければ<a href="https://github.com/ryotarai/itamae">Itamae</a>試したかった</li>
<li>まだちょっとしかさわってないので知見があればシェアさせて頂きます</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://docs.ansible.com/playbooks_roles.html">Playbook Roles and Include Statements - Ansible</a></li>
<li><a href="http://docs.ansible.com/playbooks_best_practices.html">Best Practices - Ansible</a></li>
<li><a href="http://tdoc.info/blog/2013/04/20/ansible.html">ansibleを使ってみる - そこはかとなく書くよん。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#isucon 4の予選に出た]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/06/isucon4/"/>
    <updated>2014-10-06T13:46:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/06/isucon4</id>
    <content type="html"><![CDATA[<p>ISUCON4に参加してきました。</p>

<ul>
<li><a href="http://isucon.net/archives/40576269.html">ISUCON4 本戦出場者決定のお知らせと本選出場者の利用言語比率</a></li>
</ul>


<p>上記の結果本戦出場にはたどり着けませんでした。<br/>
もし次回ISUCONがあれば、AMI提出の確認は全員で行いたいと思います。</p>

<blockquote><p>競技終了前に、全員でレギュレーション音読<br/>
競技終了後に、全員でAMI提出指差し確認実施</p></blockquote>

<h3>やったこと</h3>

<ul>
<li>とくになし</li>
</ul>


<h3>振り返り</h3>

<p>チームとして前進した気がする。</p>

<ul>
<li>走りだす前に全体つかむことができてよかった</li>
<li>実装前にその実装が可能かどうか確認することができてよかった</li>
<li>再起動を終了1時間前に実施できたのはよかった</li>
<li>全体のアクセスの統計とレスポンスタイムが遅いアクセスの割合を出した</li>
<li>335さんとひさいちが読んでコード書いててくれたのでここオンメモリやろ〜ヤジってればよかった</li>
<li>コンテキストスイッチ気にしすぎた。それよりもindexの改善はオレの役割だった</li>
</ul>


<p>4になって、事前に準備できることはしておかないといけない<br/>
リアル競技になってきた感が強い。</p>

<h2>参考</h2>

<ul>
<li><a href="http://hisaichi5518.hatenablog.jp/entry/2014/09/30/001034">#isucon 4の予選に出た - パルカワ2</a></li>
<li><a href="http://soh335.hatenablog.com/entry/2014/09/30/003912">#isucon 4 の予選に参加した- @soh335 memo</a></li>
</ul>


<p>運営の方、お疲れ様でした！<br/>
データホテルチームがんばれ〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014/09読んだ本]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/01/201409-book/"/>
    <updated>2014-10-01T00:00:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/10/01/201409-book</id>
    <content type="html"><![CDATA[<p>Akamaiの本が面白かった。<br/>
BGP繋ぎこんで終わりの世界だと思っていたので<br/>
目からうろこだった。</p>

<p>初速思考、<a href="http://shibayu36.hatenablog.com/entry/2014/09/15/102509">しばゆー君の記事</a>で面白そうだなと思って読んだ。<br/>
正直手を抜いていたところがあったので、<br/>
そうだよな〜、ちゃんとやるべきだよな〜って思って<br/>
メモを取るようにした。あと、覚えておいた方がいいもの<br/>
調べておいた方がいいものを御座なりにしないよう心がけ始めた。<br/>
まずは手を動かす、細かいことでも取り敢えずやりきる習慣を身につけたいものだ。</p>

<p>あとは、これからアプリケーション周りのコードを書くつもりなので<br/>
プログラミング周りの有名な2冊をささっと読んだ。</p>

<p>新しい環境は既にAnsibleが入っていたので困らない限りはAnsible使って行ってみたい。<br/>
<a href="http://mozaic.fm/post/95128341833/7-rest">mozaic.fm #7</a>がとても面白かったので例の書籍を今更読んでみた。</p>

<p>Go、ちゃんとやりたいけどまず仕事で使いそうなRailsを学習しているので<br/>
10月はそこをカチっとやっていく。あと瞬間英作文の復習を合間にやっていけたらいいな。</p>

<p>宇宙博の帰りに宇宙兄弟の最新刊が当日発売されているの知って<br/>
ちょっとテンション上がった。</p>

<p>幕張メッセ、大ホールとかすっからかんで面白かった。<br/>
<a href="https://flic.kr/p/pkXS8j">レッドブルのこれ</a>かっこよかった。</p>

<p>カミさんがこれ本物？レプリカって書いてないよ？レプリカより本物が良い。<br/>
って言ってて本物志向だった。</p>

<p>あとJAXAのTシャツ着て行ったらJAXAの美人広報さんに見つかって<br/>
チラチラTシャツ見られながらすごい熱心に<br/>
海中から引き上げられたH2ロケットの説明を色々話してくれて<br/>
めちゃくちゃJAXA好きみたいになってて結構恥ずかしかった。</p>

<p>とても面白かった。</p>

<div style="margin-bottom:15px;"><a href="http://booklog.jp/users/kenjiskywalker" target="_blank">kenjiskywalkerの本棚</a> - 2014年09月 (9作品)</div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00MALTGDY" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Ef9h7qfpL._SL75_.jpg" width="47" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00MALTGDY" target="_blank">入門Ansible</a><br /><a href="http://booklog.jp/author/%E8%8B%A5%E5%B1%B1%E5%8F%B2%E9%83%8E" target="_blank">若山史郎</a><br />読了日：09月06日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4774142042" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51qo6pgjaSL._SL75_.jpg" width="54" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4774142042" target="_blank">Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)</a><br /><a href="http://booklog.jp/author/%E5%B1%B1%E6%9C%AC%E9%99%BD%E5%B9%B3" target="_blank">山本陽平</a><br />読了日：09月06日<br /><img src="http://booklog.jp/images/rank/5.gif" width="59" height="12" alt="評価5" /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4774166278" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61gSqezYgPL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4774166278" target="_blank">WEB+DB PRESS Vol.82</a><br /><a href="http://booklog.jp/author/%E5%B1%B1%E5%8F%A3%E5%BE%B9" target="_blank">山口徹</a><br />読了日：09月06日<br /><img src="http://booklog.jp/images/rank/5.gif" width="59" height="12" alt="評価5" /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00MIFE3BC" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51T4L8K2yLL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00MIFE3BC" target="_blank">アカマイ　知られざるインターネットの巨人 (角川ＥＰＵＢ選書)</a><br /><a href="http://booklog.jp/author/%E5%B0%8F%E5%B7%9D%E6%99%83%E9%80%9A" target="_blank">小川晃通</a><br />読了日：09月10日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4534050887" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41R-WuPO9yL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4534050887" target="_blank">初速思考 30代で一気に突き抜ける人の集中戦略</a><br /><a href="http://booklog.jp/author/%E9%87%91%E7%94%B0%E5%8D%9A%E4%B9%8B" target="_blank">金田博之</a><br />読了日：09月10日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4798111112" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Y4DWH4N3L._SL75_.jpg" width="54" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4798111112" target="_blank">オブジェクト指向入門 第2版 原則・コンセプト (IT Architect’Archive クラシックモダン・コンピューティング)</a><br /><a href="http://booklog.jp/author/%E3%83%90%E3%83%BC%E3%83%88%E3%83%A9%E3%83%B3%E3%83%89%E3%83%BB%E3%83%A1%E3%82%A4%E3%83%A4%E3%83%BC" target="_blank">バートランド・メイヤー</a><br />読了日：09月18日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/B00JEYPPOE" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51LZpcbh3LL._SL75_.jpg" width="59" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/B00JEYPPOE" target="_blank">Code Complete 第2版 上　完全なプログラミングを目指して</a><br /><a href="http://booklog.jp/author/%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96%E3%83%BB%E3%83%9E%E3%82%B3%E3%83%8D%E3%83%AB" target="_blank">スティーブ・マコネル</a><br />読了日：09月18日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4274066428" target="_blank"><img src="http://ecx.images-amazon.com/images/I/4151YFZ27NL._SL75_.jpg" width="57" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4274066428" target="_blank">プログラミングRuby 第2版 言語編</a><br /><a href="http://booklog.jp/author/Dave+Thomas" target="_blank">Dave Thomas</a><br />読了日：09月18日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4063883515" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61UN%2BOSffyL._SL75_.jpg" width="52" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4063883515" target="_blank">宇宙兄弟(24) (モーニング KC)</a><br /><a href="http://booklog.jp/author/%E5%B0%8F%E5%B1%B1%E5%AE%99%E5%93%89" target="_blank">小山宙哉</a><br />読了日：09月22日<br /></div><br style="clear:both;" /></div>


<div style="margin:10px 0;font-size:80%;">powered by <a href="http://booklog.jp" target="_blank">booklog</a></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sensuのmackerel用のmetrics handlerをつくった #mackerelio]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/25/sensu-mackerel-handler/"/>
    <updated>2014-09-25T14:38:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/25/sensu-mackerel-handler</id>
    <content type="html"><![CDATA[<p><a href="http://mackerelio.connpass.com/event/8458/">Mackerel Meetup #2 Tokyo</a>に参加してきました。</p>

<p>美味しいサバ料理頂いたりピザ頂いたりビール頂いたりして最高でした。<br/>
個人的には監視はSensuかnagiosかに任せて、<br/>
メトリクス周りをmackerelに任せたいなという構想があったりなかったりしています。</p>

<p>mackerelがDataDogsを超えて全世界で使われるようになったら<br/>
面白そうですよね。</p>

<p>個人的にほしい機能は監視の充実より先にメトリクス周りの整備をしてほしいです。</p>

<p>@fujiwaraさんが、n分前と現在の差分データを取得できると良いとおっしゃっていて<br/>
それあったら便利だな〜、と便乗していました(もちろんZabbixは可能です)。</p>

<p>使うか使わないかはわかりませんが、Sensuのhandlerで<br/>
mackerelを指定できるようプラグインを作成しました。</p>

<p>hostの登録は別でしないといけませんが(plugin側で担保しても良いかも)<br/>
既にSensuを利用している方は、こちらのhandlerを入れてもらえれば<br/>
mackerelへmetricsを送信することが可能です。</p>

<p>どうぞご利用ください。</p>

<ul>
<li><a href="https://github.com/kenjiskywalker/sensu-community-plugins/blob/master/handlers/metrics/mackerel-metrics.rb">mackerel-metrics.rb</a></li>
<li><a href="https://github.com/kenjiskywalker/sensu-community-plugins/blob/master/handlers/metrics/mackerel-metrics.json">mackerel-metrics.json</a></li>
</ul>


<p><a href="https://github.com/sensu/sensu-community-plugins/pull/777">pull requst</a>中です。<br/>
777番目なのでめでたいです。</p>

<blockquote><p>はてな社の方へ<br/>
headerが雑なのでプロモーションも兼ねて編集して頂いた方がいいかもしれないです</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sensu Casual Talks #1 に行ってきた #sensucasual]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/17/sensu-casual/"/>
    <updated>2014-09-17T23:13:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/17/sensu-casual</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/7607003">Sensu Casual Talks #1</a>にいってきた。</p>

<p><img src="https://dl.dropboxusercontent.com/u/5390179/sensu-sushi.jpg" alt="https://dl.dropboxusercontent.com/u/5390179/sensu-sushi.jpg" /></p>

<p><a href="https://twitter.com/timwata">@timwata</a>さんのGraphiteのスケールの話が興味深かった。<br/>
3000台ぐらいのクライアントをSensuとGraphiteで見てるの<br/>
相当貴重な知見だと思う。</p>

<p>自分が話してきたのは特にどうということもなくて<br/>
Chefを使えばOfficial cookbookと自分で何個かcookbookを書くことで<br/>
比較的簡単に(※1)導入、運用ができるという話をしてきた。</p>

<script async class="speakerdeck-embed" data-id="a9228a4020a1013253af5234a31dec8b" data-ratio="1.33333333333333" src="http://kenjiskywalker.github.com/kenjiskywalker//speakerdeck.com/assets/embed.js"></script>


<p></p>

<p>cookbookはここにまとめてある。</p>

<p><a href="https://github.com/kenjiskywalker/chef/tree/master/site-cookbooks">https://github.com/kenjiskywalker/chef/tree/master/site-cookbooks</a></p>

<p>Sensu、スケールしていくとどこがボトルネックになるか<br/>
みたいな話はユースケースが増えていくとコツみたいなのが<br/>
見えてくると思う。だけどnagiosで困っていないのにわざわざ<br/>
sensuに乗り換えるのは無駄だと思う。</p>

<p>KAIZEN社は日本のウェッブ業界でも最先端の会社なので<br/>
定期的に現状を確認しに行きたいと思う。</p>

<p>Tシャツありがとうございました。<br/>
開催して頂いた@glidenote氏、ありがとうございました！</p>

<iframe src="http://kenjiskywalker.github.com/kenjiskywalker//instagram.com/p/tDBpKKJqkv/embed/" width="612" height="710" frameborder="0" scrolling="no" allowtransparency="true"></iframe>


<blockquote><p>※1… 個人差があります</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consulでkey/valueを叩く]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/09/consul-key-value/"/>
    <updated>2014-09-09T23:09:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/09/consul-key-value</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Consulでkey/valueを叩く</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']% curl -X PUT -d 'bar' http://127.0.0.1:8500/v1/kv/foo
</span><span class='line'>true
</span><span class='line'>['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.1:8500/v1/kv/foo | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 538,
</span><span class='line'>    "ModifyIndex": 538,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": "YmFy"
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.2:8500/v1/kv/foo | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 538,
</span><span class='line'>    "ModifyIndex": 538,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": "YmFy"
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -X PUT -d 'barbar' http://127.0.0.2:8500/v1/kv/foofoo
</span><span class='line'>true
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.1:8500/v1/kv/foofoo | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 540,
</span><span class='line'>    "ModifyIndex": 540,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foofoo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": "YmFyYmFy"
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>


<h3>delete</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']%
</span><span class='line'>['-']% curl -X DELETE -d 'barbar' http://127.0.0.2:8500/v1/kv/foofoo
</span><span class='line'>['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.1:8500/v1/kv/foofoo | jq .
</span><span class='line'>['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -X PUT -d 'barbar' http://127.0.0.2:8500/v1/kv/foofoo
</span><span class='line'>true%                                                                                                  ['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>


<h3>再帰もいける</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']% curl -s 'http://127.0.0.1:8500/v1/kv/?recurse' | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 555,
</span><span class='line'>    "ModifyIndex": 555,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foofoo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": "YmFyYmFy"
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 538,
</span><span class='line'>    "ModifyIndex": 538,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": "YmFy"
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>


<h3>flags</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.2:8500/v1/kv/foofoo | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 555,
</span><span class='line'>    "ModifyIndex": 559,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foofoo",
</span><span class='line'>    "Flags": 0,
</span><span class='line'>    "Value": null
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -X PUT 'barbar' -s 'http://127.0.0.1:8500/v1/kv/foofoo?flags=1' | jq .
</span><span class='line'>true
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s http://127.0.0.2:8500/v1/kv/foofoo | jq .
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "CreateIndex": 555,
</span><span class='line'>    "ModifyIndex": 560,
</span><span class='line'>    "LockIndex": 0,
</span><span class='line'>    "Key": "foofoo",
</span><span class='line'>    "Flags": 1,
</span><span class='line'>    "Value": null
</span><span class='line'>  }
</span><span class='line'>]
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>


<h3>階層化とdecode</h3>

<blockquote><p>BSD の base64 コマンドだと<br/>
-dがdebugで-Dがdecodeだった</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>['-']% curl -X PUT -d 'bazbazbaz' -s 'http://127.0.0.1:8500/v1/kv/foo/bar/baz'
</span><span class='line'>true
</span><span class='line'>['x']%
</span><span class='line'>['x']% curl -s 'http://127.0.0.1:8500/v1/kv/foo/bar/baz' | jq '.[]'
</span><span class='line'>{
</span><span class='line'>  "CreateIndex": 565,
</span><span class='line'>  "ModifyIndex": 568,
</span><span class='line'>  "LockIndex": 0,
</span><span class='line'>  "Key": "foo/bar/baz",
</span><span class='line'>  "Flags": 0,
</span><span class='line'>  "Value": "YmF6YmF6YmF6"
</span><span class='line'>}
</span><span class='line'>['-']%
</span><span class='line'>['-']%
</span><span class='line'>['-']% curl -s 'http://127.0.0.1:8500/v1/kv/foo/bar/baz' | jq '.[].Value' -r | base64 -D
</span><span class='line'>bazbazbaz
</span><span class='line'>['-']%</span></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consulでnodeの増減時に特定のスクリプトを実行させる]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/09/consul-event-handle-watches/"/>
    <updated>2014-09-09T22:21:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/09/consul-event-handle-watches</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>ConsulでSerfのEvent Handlerのようなものを試したメモ</p>

<h2>main</h2>

<p>Consulの<a href="https://www.hashicorp.com/blog/consul-0-4.html">0.4</a>から<code>Watches</code>という機能が追加されて<br/>
Serfのevent handlerのようなことができるようになった。</p>

<p>昨日つくった<a href="https://github.com/kenjiskywalker/consul-test">consul-test</a>に</p>

<ul>
<li>node01/config.json</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "node_name": "node01",
</span><span class='line'>  "data_dir": "./node01/",
</span><span class='line'>  "bind_addr": "127.0.0.1",
</span><span class='line'>  "client_addr": "127.0.0.1",
</span><span class='line'>  "ui_dir": "./dist/",
</span><span class='line'>  "watches": [
</span><span class='line'>    {
</span><span class='line'>      "type": "nodes",
</span><span class='line'>      "handler": "./node01/hosts_update.rb"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></pre></td></tr></table></div></figure>


<p>watchesの設定を追加してみた。</p>

<p><code>hosts_update.rb</code>でやっていることはシンプルで<br/>
nodesに変化があった場合に、標準入力でnodesの情報を取得し、<br/>
同ディレクトリに<code>_hosts</code>ファイルを生成して、<br/>
nodeの名前とそのAddressを<br/>
hostsファイルに似せて出力するようにしている。</p>

<blockquote><p>Consulには<code>SERF_EVENT</code>のような<br/>
管理しているnodeの変化の状態をSTDINで受け取る方法はないのだろうか</p></blockquote>

<h2>雑談</h2>

<p>このような簡単なスクリプトはGoで書いてもいいかもしれないけど<br/>
バイナリだけ置いてあるような状態の時に<br/>
<em>作成者を全面的に信用する</em>みたいな部活っぽい対応になりそう。<br/>
簡易スクリプトをGoで書いたらバイナリとそのソースファイルを<br/>
同ディレクトリに置いておくとかが良いんだろうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consul Clusterを手元に構築する簡単なスクリプトかいた]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/08/consul-test-tool/"/>
    <updated>2014-09-08T21:01:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/08/consul-test-tool</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/kenjiskywalker/consul-test">https://github.com/kenjiskywalker/consul-test</a></h2>

<p>READMEのとおりですが</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>Node    Address         Status  Type    Build  Protocol
</span><span class='line'>node01  127.0.0.1:8301  alive   server  0.4.0  2
</span><span class='line'>node02  127.0.0.2:8301  alive   server  0.4.0  2
</span><span class='line'>node03  127.0.0.3:8301  alive   server  0.4.0  2
</span><span class='line'>node04  127.0.0.4:8301  alive   client  0.4.0  2</span></pre></td></tr></table></div></figure>


<p>上記構成のConsul Clusterを<br/>
OS X上に簡単に作成できるスクリプトをつくりましたので<br/>
よかったらご利用ください。</p>

<h3>あわせてよみたい</h3>

<p><a href="http://blog.kenjiskywalker.org/blog/2014/06/06/consul-dns-round-robin/">ConsulのDNSラウンドロビンの検証</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssコマンドの使えそうなもののメモ]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/06/ss-command/"/>
    <updated>2014-09-06T23:11:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/06/ss-command</id>
    <content type="html"><![CDATA[<p><code>$ss -lt</code>と<code>$ss -ltp</code>は使える。<br/>
<code>-i</code>は面白いけど本当に確認するなら<code>ngrep</code>か<code>tcpdump</code>だろうな</p>

<h2>セッションを開いているホスト名を名前解決しない(デフォルト)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -n
</span></pre></td></tr></table></div></figure>


<h2>セッションを開いているホスト名を名前解決する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -r
</span></pre></td></tr></table></div></figure>


<h2>TCPのセッションのみ表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -t
</span></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -A tcp
</span></pre></td></tr></table></div></figure>


<h2>UDPのセッションのみ表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -u
</span></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -A udp
</span></pre></td></tr></table></div></figure>


<h2>TCPとUDPのセッションのみ表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -tu
</span></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -A tcp,udp
</span></pre></td></tr></table></div></figure>


<h2>UNIX Domainのセッションのみ表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -x
</span></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -A unix
</span></pre></td></tr></table></div></figure>


<h2>特定のセッションの状態のものを抽出</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -t state fin-wait-2
</span></pre></td></tr></table></div></figure>


<h2>TCPでLISTENしているポートを表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -lt
</span></pre></td></tr></table></div></figure>


<h2>TCPでLISTENしているポートのプロセス名を表示</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ss</span> -ltp
</span></pre></td></tr></table></div></figure>


<p>コマンド名自体が短いからササッと確認するのには良さそう</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hubot-atというhubot pluginをつくった]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/04/hubot-at/"/>
    <updated>2014-09-04T14:22:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/09/04/hubot-at</id>
    <content type="html"><![CDATA[<p>Slackを使い始めたので昔つくった<a href="http://kenjiskywalker.hatenablog.com/entry/20121010/1349878137">unazu_kun</a>の機能を<br/>
hubotに持ってきました。</p>

<h2><a href="https://www.npmjs.org/package/hubot-at">hubot-at</a></h2>

<p><img src="https://dl.dropboxusercontent.com/u/5390179/hubot-at-capture.png" alt="https://dl.dropboxusercontent.com/u/5390179/hubot-at-capture.png" /></p>

<p>というように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'>&gt; hubot at HH:MM message</span></pre></td></tr></table></div></figure>


<p>と指定することによって、その指定した時間に<code>message</code>を通知してくれます。</p>

<p>元々taiyohさんが</p>

<ul>
<li><a href="http://taiyoh.hatenablog.com/entry/2013/05/19/105832">hubotにもunazu_kun的な機能を追加する - taiyoh&#8217;s memorandum</a></li>
</ul>


<p>にて書いてくれていたので、それを踏襲しています。<br/>
ありがとうございます。</p>

<p>最低限の実装しかしていません。何かあればpull requestください:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014/07読んだ本]]></title>
    <link href="http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/08/31/201408-book/"/>
    <updated>2014-08-31T16:06:00+09:00</updated>
    <id>http://kenjiskywalker.github.com/kenjiskywalker/blog/2014/08/31/201408-book</id>
    <content type="html"><![CDATA[<p>booklogというサービス、デザインと使い勝手が本当に良い。</p>

<div style="margin-bottom:15px;"><a href="http://booklog.jp/users/kenjiskywalker" target="_blank">kenjiskywalkerの本棚</a> - 2014年08月 (4作品)</div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4063951413" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51q59350wWL._SL75_.jpg" width="50" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4063951413" target="_blank">進撃の巨人(14) (講談社コミックス)</a><br /><a href="http://booklog.jp/author/%E8%AB%AB%E5%B1%B1%E5%89%B5" target="_blank">諫山創</a><br />読了日：08月09日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4041013992" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51qjvPhcfgL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4041013992" target="_blank">多重人格探偵サイコ (20) (カドカワコミックス・エース)</a><br /><a href="http://booklog.jp/author/%E7%94%B0%E5%B3%B6%E6%98%AD%E5%AE%87" target="_blank">田島昭宇</a><br />読了日：08月09日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4053031737" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41OmvQ2%2BeZL._SL75_.jpg" width="54" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4053031737" target="_blank">成川の「なぜ」がわかる英文法の授業 (大学受験Nシリーズ)</a><br /><a href="http://booklog.jp/author/%E6%88%90%E5%B7%9D%E5%8D%9A%E5%BA%B7" target="_blank">成川博康</a><br />読了日：08月17日<br /></div><br style="clear:both;" /></div>


<div style="margin-bottom:5px;"><div style="width:75px;height:75px;float:left;margin-right:2px;"><a href="http://booklog.jp/item/1/4774165786" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51XYWUokftL._SL75_.jpg" width="53" height="75" alt="" /></a></div><div><a href="http://booklog.jp/item/1/4774165786" target="_blank">フロントエンドエンジニア養成読本 [HTML、CSS、JavaScriptの基本から現場で役立つ技術まで満載! ] (Software Design plus)</a><br /><a href="http://booklog.jp/author/%E6%96%89%E8%97%A4%E7%A5%90%E4%B9%9F" target="_blank">斉藤祐也</a><br />読了日：08月17日<br /></div><br style="clear:both;" /></div>


<div style="margin:10px 0;font-size:80%;">powered by <a href="http://booklog.jp" target="_blank">booklog</a></div>


<p></p>

<p>この前<br/>
<a href="http://blog.kenjiskywalker.org/blog/2014/06/09/github-add-color-to-recently-not-update-file/">GitHubで最近更新されていないプロジェクトを簡単に見分けるChrome Extentionつくった</a><br/>
で<br/>
JavaScriptやってみたけど基本的なこと全然理解していなかったので<br/>
本読んだ。JavaScriptとか目に見えて変わるものは面白い。</p>
]]></content>
  </entry>
  
</feed>
